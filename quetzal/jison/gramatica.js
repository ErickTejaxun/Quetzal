/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[5,21,33,34,35,36,37],$V7=[2,36],$V8=[1,18],$V9=[15,22,26],$Va=[2,24],$Vb=[1,34],$Vc=[1,24],$Vd=[1,55],$Ve=[1,54],$Vf=[1,30],$Vg=[1,25],$Vh=[1,26],$Vi=[1,27],$Vj=[1,28],$Vk=[1,29],$Vl=[1,31],$Vm=[1,32],$Vn=[1,33],$Vo=[1,35],$Vp=[1,36],$Vq=[1,37],$Vr=[1,38],$Vs=[1,39],$Vt=[1,40],$Vu=[1,53],$Vv=[1,56],$Vw=[1,58],$Vx=[1,57],$Vy=[1,63],$Vz=[2,5,21,27,33,34,35,36,37,39,40,41,85,89,90,91,92,93],$VA=[1,67],$VB=[1,68],$VC=[1,69],$VD=[1,70],$VE=[1,71],$VF=[1,72],$VG=[1,73],$VH=[1,74],$VI=[1,75],$VJ=[1,76],$VK=[1,77],$VL=[1,78],$VM=[1,79],$VN=[1,80],$VO=[1,81],$VP=[1,82],$VQ=[1,83],$VR=[15,26,30,42,43,44,45,46,52,53,54,55,56,57,58,59,61,62,63,64,95],$VS=[1,92],$VT=[1,103],$VU=[26,30],$VV=[15,26,30,42,43,44,45,46,52,53,54,55,56,57,58,59,61,62,63,64],$VW=[1,157],$VX=[1,160],$VY=[1,162],$VZ=[1,158],$V_=[1,159],$V$=[1,163],$V01=[1,164],$V11=[1,165],$V21=[1,166],$V31=[15,26,30,42,43,52,53,54,55,56,57,58,59,61,63,64],$V41=[15,26,30,42,43,44,45,46,52,53,54,55,56,57,58,59,61,63,64],$V51=[15,26,30,52,53,54,55,56,57,58,59,63,64],$V61=[15,26,30,58,59,63,64],$V71=[2,21,27,33,34,35,36,37,39,40,41,85,89,90,91,92,93],$V81=[1,236],$V91=[39,89,91];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONESG":4,"EOF":5,"INSTRUCCIONG":6,"FUNCION":7,"ASIGNACION":8,"DECLARACION":9,"INSTRUCCIONES":10,"INSTRUCCION":11,"PRINTLN":12,"PRINT":13,"LLAMADA":14,";":15,"RETORNO":16,"SWITCHINST":17,"BREAKINST":18,"WHILEINST":19,"DOWHILEINST":20,"id":21,"=":22,"E":23,"TIPO":24,"LID":25,",":26,"retorno":27,"(":28,"LPARAMETROS":29,")":30,"BLOQUE":31,"PARAMETRO":32,"tint":33,"tdouble":34,"tstring":35,"tchar":36,"tvoid":37,"{":38,"}":39,"println":40,"print":41,"+":42,"-":43,"*":44,"/":45,"%":46,"pow":47,"sqrt":48,"sin":49,"cos":50,"tan":51,">=":52,"<=":53,"!=":54,"==":55,">":56,"<":57,"||":58,"&&":59,"!":60,"&":61,"^":62,"?":63,":":64,"entero":65,"double":66,"texto":67,"caracter":68,"nulo":69,"verdadero":70,"falso":71,"tipode":72,"PARSEBOOL":73,"PARSEDOUBLE":74,"PARSEINT":75,"NATIVATOINT":76,"NATIVATOSTRING":77,"NATIVATODOUBLE":78,"LOWERCADENA":79,"UPPERCADENA":80,"LENGTHCADENA":81,"PORCIONCADENA":82,"POSICIONCADENA":83,"LExpr":84,"Rswitch":85,"LISTACASE":86,"DEFAULTINST":87,"CASE":88,"Rcase":89,"Rbreak":90,"Rdefault":91,"Rwhile":92,"Rdo":93,"boolean":94,".":95,"parse":96,"ToInt":97,"ToDouble":98,"ToString":99,"caracterlower":100,"caracterupper":101,"caracterlength":102,"caracterporcion":103,"caracterposicion":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:";",21:"id",22:"=",26:",",27:"retorno",28:"(",30:")",33:"tint",34:"tdouble",35:"tstring",36:"tchar",37:"tvoid",38:"{",39:"}",40:"println",41:"print",42:"+",43:"-",44:"*",45:"/",46:"%",47:"pow",48:"sqrt",49:"sin",50:"cos",51:"tan",52:">=",53:"<=",54:"!=",55:"==",56:">",57:"<",58:"||",59:"&&",60:"!",61:"&",62:"^",63:"?",64:":",65:"entero",66:"double",67:"texto",68:"caracter",69:"nulo",70:"verdadero",71:"falso",72:"tipode",85:"Rswitch",89:"Rcase",90:"Rbreak",91:"Rdefault",92:"Rwhile",93:"Rdo",94:"boolean",95:".",96:"parse",97:"ToInt",98:"ToDouble",99:"ToString",100:"caracterlower",101:"caracterupper",102:"caracterlength",103:"caracterporcion",104:"caracterposicion"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[10,2],[10,1],[11,1],[11,1],[11,2],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[8,4],[9,3],[9,5],[25,3],[25,1],[16,3],[16,2],[7,6],[7,5],[29,3],[29,1],[32,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[31,3],[12,5],[13,5],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,6],[23,4],[23,4],[23,4],[23,4],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,3],[23,3],[23,5],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,4],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[14,3],[14,4],[84,3],[84,1],[17,8],[86,2],[86,1],[88,4],[18,2],[87,3],[87,0],[19,5],[20,7],[73,6],[74,6],[75,6],[76,4],[78,4],[77,4],[79,5],[80,5],[81,5],[82,8],[83,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
		
	return new Raiz($$[$0-1].linea, $$[$0-1].columna, $$[$0-1]); 

break;
case 2: case 7:
 
				  	this.$ = $$[$0-1]; 
					this.$.registrarInstruccion($$[$0]);
				
break;
case 3:
 
					this.$ = new Bloque(_$[$0].first_line-1,_$[$0].first_column-1); 
					if($$[$0]!=null){this.$.registrarInstruccion($$[$0]);} // Si es nulo, viene de un error manejado en otras producciones.
				
break;
case 4: case 9: case 10:
 this.$ = $$[$0];
break;
case 5: case 6: case 12: case 13: case 14: case 15: case 16: case 17: case 18:
this.$ = $$[$0];
break;
case 8:
 
							this.$ = new Bloque(_$[$0].first_line-1,_$[$0].first_column-1); 
							if($$[$0]!=null){this.$.registrarInstruccion($$[$0]);} // Si es nulo, viene de un error manejado en otras producciones.
						  
break;
case 11:
this.$ =$$[$0-1];
break;
case 19:
 	
						Utils.registrarErrorSintactico(_$[$0].first_line-1,_$[$0].first_column-1, $$[$0], $$[$0]);
						this.$ = null;						
					
break;
case 20:
 this.$ = new Asignacion(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-3],$$[$0-1]); 
break;
case 21:
 this.$ = new Declaracion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0-1],null);
break;
case 22:
 this.$ = new Declaracion(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4],$$[$0-3],$$[$0-1]);
break;
case 23:
this.$  =$$[$0-2]; this.$.push($$[$0]);
break;
case 24:
 this.$ = new Array; this.$.push($$[$0]); 
break;
case 25:
 this.$= new Retorno(_$[$0-2].first_line-1,_$[$0-2].first_column-1, $$[$0-1]);
break;
case 26:
 this.$= new Retorno(_$[$0-1].first_line-1,_$[$0-1].first_column-1, null);
break;
case 27:
 this.$ = new Funcion(_$[$0-5].first_line-1,_$[$0-5].first_column-1, $$[$0-5], $$[$0-4], $$[$0-2],$$[$0]);
break;
case 28:
 this.$ = new Funcion(_$[$0-4].first_line-1,_$[$0-4].first_column-1, $$[$0-4], $$[$0-3], new Array,$$[$0]);
break;
case 29:
this.$ =$$[$0-2]; this.$.push($$[$0]);
break;
case 30:
this.$ = new Array; this.$.push($$[$0]);
break;
case 31:
 this.$ = new Parametro(_$[$0-1].first_line-1,_$[$0-1].first_column-1, $$[$0-1], $$[$0]);
break;
case 32:
 this.$ = new Tipo(TipoPrimitivo.INT);
break;
case 33:
 this.$ = new Tipo(TipoPrimitivo.DOUBLE);
break;
case 34:
 this.$ = new Tipo(TipoPrimitivo.STRING);
break;
case 35:
 this.$ = new Tipo(TipoPrimitivo.CHAR);
break;
case 36:
this.$ = new Tipo(TipoPrimitivo.STRUCT, $$[$0]);
break;
case 37:
 this.$ = new Tipo(TipoPrimitivo.VOID);
break;
case 38:
this.$ = $$[$0-1]; 
break;
case 39:

			this.$ = new Println(_$[$0-4].first_line-1,_$[$0-4].first_column-1, $$[$0-2]);			
		
break;
case 40:

			this.$ = new Print(_$[$0-4].first_line-1,_$[$0-4].first_column-1, $$[$0-2]);			
		
break;
case 41:

		this.$ = $$[$0-1];		
	
break;
case 42:

		this.$ = new Suma(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);	
	
break;
case 43:

		this.$ = new Resta(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 44:

		this.$ = new Multiplicacion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 45:

		this.$ = new Division(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 46:

		this.$ = new Modulo(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 47:

		this.$ = new Potencia(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-3], $$[$0-1]);
	
break;
case 48:

		this.$ = new RaizCuadrada(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 49:

		this.$ = new Seno(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 50:

		this.$ = new Coseno(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 51:

		this.$ = new Tangente(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 52:

		this.$ = new Menos(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0]);
	
break;
case 53:

		this.$ = new MayorIgual(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 54:

		this.$ = new MenorIgual(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 55:

		this.$ = new Diferenciacion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 56:

		this.$ = new Igualdad(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 57:

		this.$ = new MayorQue(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 58:

		this.$ = new MenorQue(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 59:

		this.$ = new OrLog(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 60:

		this.$ = new AndLog(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 61:

		this.$ = new NotLog(_$[$0].first_line,_$[$0].first_column,$$[$0]);
	
break;
case 62:

		this.$ = new Concatenar(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 63:

		this.$ = new PotenciaString(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 64:

		this.$ = new Ternario(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4],$$[$0-2], $$[$0]);
	
break;
case 65:

		this.$ = new Entero(_$[$0].first_line-1,_$[$0].first_column-1, parseInt($$[$0]));
	
break;
case 66:

		this.$ = new Double(_$[$0].first_line-1,_$[$0].first_column-1, parseFloat($$[$0]));
	
break;
case 67:

		this.$ = new ExpVariable(_$[$0].first_line-1,_$[$0].first_column-1,$$[$0]);
	
break;
case 68:

		this.$ = new ExpString(_$[$0].first_line-1,_$[$0].first_column-1,$$[$0].substring(1,$$[$0].length-1));
		
	
break;
case 69:

		this.$ = new Caracter(_$[$0].first_line,_$[$0].first_column,$$[$0].substring(1,$$[$0].length-1));
	
break;
case 70:

		this.$ = new Nulo(_$[$0].first_line-1,_$[$0].first_column-1);
	
break;
case 71:

		this.$ = new ExpBooleana(_$[$0].first_line-1,_$[$0].first_column-1, true);
	
break;
case 72:

		this.$ = new ExpBooleana(_$[$0].first_line-1,_$[$0].first_column-1, false);
	
break;
case 73:

		this.$ = new TipoDe(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85:
this.$= $$[$0];
break;
case 86:
 this.$ = new Llamada(_$[$0-2].first_line-1,_$[$0-2].first_column-1, $$[$0-2], new Array);
break;
case 87:
 this.$ = new Llamada(_$[$0-3].first_line-1,_$[$0-3].first_column-1, $$[$0-3], $$[$0-1]);
break;
case 88:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 89:
this.$= new Array; this.$.push($$[$0]);
break;
case 94:
 this.$= new BreakInst(_$[$0-1].first_line-1,_$[$0-1].first_column-1);
break;
case 95:
 this.$= new DefaultInst(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0]);
break;
case 99:
 this.$ = new ParseBool(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 100:
 this.$ = new ParseDouble(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 101:
 this.$ = new ParseInt(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 102:
 this.$ = new NativaToInt(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 103:
 this.$ = new NativaToDouble(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 104:
 this.$ = new NativaToString(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 105:
 this.$ = new LowerCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 106:
 this.$ = new UpperCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 107:
 this.$ = new LengthCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 108:
 this.$ = new PorcionCadena(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-7],$$[$0-3],$$[$0-1]);
break;
case 109:
 this.$ = new PosicionCadena(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-5],$$[$0-1]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,21:$V0,24:7,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5},{1:[3]},{5:[1,14],6:15,7:4,8:5,9:6,21:$V0,24:7,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5},o($V6,[2,3]),o($V6,[2,4]),o($V6,[2,5]),o($V6,[2,6]),{21:[1,16],25:17},{21:$V7,22:$V8},{21:[2,32]},{21:[2,33]},{21:[2,34]},{21:[2,35]},{21:[2,37]},{1:[2,1]},o($V6,[2,2]),o($V9,$Va,{28:[1,19]}),{15:[1,20],22:[1,21],26:[1,22]},{14:47,21:$Vb,23:23,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{21:$Vy,24:62,29:59,30:[1,60],32:61,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5},o($Vz,[2,21]),{14:47,21:$Vb,23:64,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{21:[1,65]},{15:[1,66],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{14:47,21:$Vb,23:84,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{28:[1,85]},{28:[1,86]},{28:[1,87]},{28:[1,88]},{28:[1,89]},{14:47,21:$Vb,23:90,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:91,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},o($VR,[2,65]),o($VR,[2,66]),o($VR,[2,67],{28:$VS}),o($VR,[2,68]),o($VR,[2,69]),o($VR,[2,70]),o($VR,[2,71]),o($VR,[2,72]),{28:[1,93]},o($VR,[2,74]),o($VR,[2,75]),o($VR,[2,76]),o($VR,[2,77]),o($VR,[2,78]),o($VR,[2,79]),o($VR,[2,80]),o($VR,[2,81]),o($VR,[2,82]),o($VR,[2,83]),o($VR,[2,84]),o($VR,[2,85]),{95:[1,94]},{95:[1,95]},{95:[1,96]},{28:[1,97]},{28:[1,98]},{28:[1,99]},{26:[1,101],30:[1,100]},{31:102,38:$VT},o($VU,[2,30]),{21:[1,104]},{21:$V7},{15:[1,105],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},o($V9,[2,23]),o($Vz,[2,20]),{14:47,21:$Vb,23:106,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:107,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:108,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:109,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:110,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:111,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:112,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:113,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:114,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:115,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:116,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:117,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:118,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:119,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:120,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:121,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{100:[1,122],101:[1,123],102:[1,124],103:[1,125],104:[1,126]},{30:[1,127],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{14:47,21:$Vb,23:128,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:129,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:130,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:131,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:132,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},o($VV,[2,52],{95:$VQ}),o($VV,[2,61],{95:$VQ}),{14:47,21:$Vb,23:135,28:$Vc,30:[1,133],33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,84:134,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:136,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{96:[1,137]},{96:[1,138]},{96:[1,139]},{14:47,21:$Vb,23:140,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:141,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:142,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{31:143,38:$VT},{21:$Vy,24:62,32:144,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5},o($V6,[2,28]),{2:$VW,8:150,9:151,10:145,11:146,12:147,13:148,14:149,16:152,17:153,18:154,19:155,20:156,21:$VX,24:161,27:$VY,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,40:$VZ,41:$V_,85:$V$,90:$V01,92:$V11,93:$V21},o($VU,[2,31]),o($Vz,[2,22]),o($V31,[2,42],{44:$VC,45:$VD,46:$VE,62:$VO,95:$VQ}),o($V31,[2,43],{44:$VC,45:$VD,46:$VE,62:$VO,95:$VQ}),o($V41,[2,44],{62:$VO,95:$VQ}),o($V41,[2,45],{62:$VO,95:$VQ}),o($V41,[2,46],{62:$VO,95:$VQ}),o($V51,[2,53],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,61:$VN,62:$VO,95:$VQ}),o($V51,[2,54],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,61:$VN,62:$VO,95:$VQ}),o($V51,[2,55],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,61:$VN,62:$VO,95:$VQ}),o($V51,[2,56],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,61:$VN,62:$VO,95:$VQ}),o($V51,[2,57],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,61:$VN,62:$VO,95:$VQ}),o($V51,[2,58],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,61:$VN,62:$VO,95:$VQ}),o($V61,[2,59],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,61:$VN,62:$VO,95:$VQ}),o($V61,[2,60],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,61:$VN,62:$VO,95:$VQ}),o($V31,[2,62],{44:$VC,45:$VD,46:$VE,62:$VO,95:$VQ}),o($VV,[2,63],{95:$VQ}),{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,64:[1,167],95:$VQ},{28:[1,168]},{28:[1,169]},{28:[1,170]},{28:[1,171]},{28:[1,172]},o($VR,[2,41]),{26:[1,173],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{30:[1,174],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{30:[1,175],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{30:[1,176],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{30:[1,177],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},o($VR,[2,86]),{26:[1,179],30:[1,178]},o($VU,[2,89],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ}),{30:[1,180],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{28:[1,181]},{28:[1,182]},{28:[1,183]},{30:[1,184],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{30:[1,185],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{30:[1,186],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},o($V6,[2,27]),o($VU,[2,29]),{2:$VW,8:150,9:151,11:188,12:147,13:148,14:149,16:152,17:153,18:154,19:155,20:156,21:$VX,24:161,27:$VY,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,39:[1,187],40:$VZ,41:$V_,85:$V$,90:$V01,92:$V11,93:$V21},o($V71,[2,8]),o($V71,[2,9]),o($V71,[2,10]),{15:[1,189]},o($V71,[2,12]),o($V71,[2,13]),o($V71,[2,14]),o($V71,[2,15]),o($V71,[2,16]),o($V71,[2,17]),o($V71,[2,18]),o($V71,[2,19]),{28:[1,190]},{28:[1,191]},{21:$V7,22:$V8,28:$VS},{21:[1,192],25:17},{14:47,15:[1,194],21:$Vb,23:193,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{28:[1,195]},{15:[1,196]},{28:[1,197]},{31:198,38:$VT},{14:47,21:$Vb,23:199,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{30:[1,200]},{30:[1,201]},{30:[1,202]},{14:47,21:$Vb,23:203,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:204,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:205,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},o($VR,[2,48]),o($VR,[2,49]),o($VR,[2,50]),o($VR,[2,51]),o($VR,[2,87]),{14:47,21:$Vb,23:206,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},o($VR,[2,73]),{14:47,21:$Vb,23:207,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:208,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:209,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},o($VR,[2,102]),o($VR,[2,104]),o($VR,[2,103]),o($Vz,[2,38]),o($V71,[2,7]),o($V71,[2,11]),{14:47,21:$Vb,23:210,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{14:47,21:$Vb,23:211,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},o($V9,$Va),{15:[1,212],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},o($V71,[2,26]),{14:47,21:$Vb,23:213,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},o($V71,[2,94]),{14:47,21:$Vb,23:214,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{92:[1,215]},o([15,26,30,63,64],[2,64],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,95:$VQ}),o($VR,[2,105]),o($VR,[2,106]),o($VR,[2,107]),{26:[1,216],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{30:[1,217],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{30:[1,218],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},o($VU,[2,88],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ}),{30:[1,219],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{30:[1,220],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{30:[1,221],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{30:[1,222],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{30:[1,223],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},o($V71,[2,25]),{30:[1,224],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{30:[1,225],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},{28:[1,226]},{14:47,21:$Vb,23:227,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},o($VR,[2,109]),o($VR,[2,47]),o($VR,[2,99]),o($VR,[2,100]),o($VR,[2,101]),{15:[1,228]},{15:[1,229]},{38:[1,230]},{31:231,38:$VT},{14:47,21:$Vb,23:232,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{30:[1,233],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},o($V71,[2,39]),o($V71,[2,40]),{86:234,88:235,89:$V81},o($V71,[2,97]),{30:[1,237],42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,95:$VQ},o($VR,[2,108]),{39:[2,96],87:238,88:239,89:$V81,91:[1,240]},o($V91,[2,92]),{14:47,21:$Vb,23:241,28:$Vc,33:$Vd,34:$Ve,43:$Vf,47:$Vg,48:$Vh,49:$Vi,50:$Vj,51:$Vk,60:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:41,74:42,75:43,76:44,77:45,78:46,79:48,80:49,81:50,82:51,83:52,94:$Vu,97:$Vv,98:$Vw,99:$Vx},{15:[1,242]},{39:[1,243]},o($V91,[2,91]),{64:[1,244]},{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,61:$VN,62:$VO,63:$VP,64:[1,245],95:$VQ},o($V71,[2,98]),o($V71,[2,90]),{2:$VW,8:150,9:151,10:246,11:146,12:147,13:148,14:149,16:152,17:153,18:154,19:155,20:156,21:$VX,24:161,27:$VY,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,40:$VZ,41:$V_,85:$V$,90:$V01,92:$V11,93:$V21},{2:$VW,8:150,9:151,10:247,11:146,12:147,13:148,14:149,16:152,17:153,18:154,19:155,20:156,21:$VX,24:161,27:$VY,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,40:$VZ,41:$V_,85:$V$,90:$V01,92:$V11,93:$V21},{2:$VW,8:150,9:151,11:188,12:147,13:148,14:149,16:152,17:153,18:154,19:155,20:156,21:$VX,24:161,27:$VY,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,39:[2,95],40:$VZ,41:$V_,85:$V$,90:$V01,92:$V11,93:$V21},o($V91,[2,93],{12:147,13:148,14:149,8:150,9:151,16:152,17:153,18:154,19:155,20:156,24:161,11:188,2:$VW,21:$VX,27:$VY,33:$V1,34:$V2,35:$V3,36:$V4,37:$V5,40:$VZ,41:$V_,85:$V$,90:$V01,92:$V11,93:$V21})],
defaultActions: {9:[2,32],10:[2,33],11:[2,34],12:[2,35],13:[2,37],14:[2,1],63:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var debugMode = false;
	function debugPrint(valor)
	{
		if(debugMode)
		{
			debugPrint(valor);
		}
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitve":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:return;
break;
case 4:return;
break;
case 5:return;
break;
case 6:return 66
break;
case 7:return 65
break;
case 8:return 67
break;
case 9:return 68
break;
case 10: debugPrint('>');return 56; 
break;
case 11: debugPrint('<');return 57; 
break;
case 12: debugPrint('>=');return 52; 
break;
case 13: debugPrint('<=');return 53; 
break;
case 14: debugPrint('==');return 55; 
break;
case 15: debugPrint('!=');return 54; 
break;
case 16: debugPrint('||');return 58; 
break;
case 17: debugPrint('?');return 63; 
break;
case 18: debugPrint('&&');return 59; 
break;
case 19: debugPrint('&');return 61; 
break;
case 20: debugPrint('!');return 60; 
break;
case 21: debugPrint('*');return 44; 
break;
case 22: debugPrint('/');return 45; 
break;
case 23: debugPrint('-');return 43; 
break;
case 24: debugPrint('+');return 42; 
break;
case 25: debugPrint('%');return 46; 
break;
case 26: debugPrint('^');return 62; 
break;
case 27: debugPrint('=');return 22; 
break;
case 28: debugPrint('(');return 28; 
break;
case 29: debugPrint(')');return 30; 
break;
case 30: debugPrint('{');return 38; 
break;
case 31: debugPrint('}');return 39; 
break;
case 32: debugPrint('[');return '['; 
break;
case 33: debugPrint(']');return ']'; 
break;
case 34: debugPrint(',');return 26; 
break;
case 35: debugPrint('.');return 95; 
break;
case 36: debugPrint(':');return 64; 
break;
case 37: debugPrint(';');return 15; 
break;
case 38: debugPrint(yy_.yytext);return 69; 
break;
case 39: debugPrint(yy_.yytext);return 70; 
break;
case 40: debugPrint(yy_.yytext);return 71; 
break;
case 41: debugPrint(yy_.yytext);return 40; 
break;
case 42: debugPrint(yy_.yytext);return 41; 
break;
case 43: debugPrint(yy_.yytext);return 72; 
break;
case 44: debugPrint(yy_.yytext);return 'tnull'; 
break;
case 45: debugPrint(yy_.yytext);return 33; 
break;
case 46: debugPrint(yy_.yytext);return 34; 
break;
case 47: debugPrint(yy_.yytext);return 94; 
break;
case 48: debugPrint(yy_.yytext);return 36; 
break;
case 49: debugPrint(yy_.yytext);return 35; 
break;
case 50: debugPrint(yy_.yytext);return 37; 
break;
case 51: debugPrint(yy_.yytext);return 27; 
break;
case 52: debugPrint(yy_.yytext);return 47; 
break;
case 53: debugPrint(yy_.yytext);return 48; 
break;
case 54: debugPrint(yy_.yytext);return 49; 
break;
case 55: debugPrint(yy_.yytext);return 50; 
break;
case 56: debugPrint(yy_.yytext);return 51; 
break;
case 57: debugPrint(yy_.yytext);return 104; 
break;
case 58: debugPrint(yy_.yytext);return 103; 
break;
case 59: debugPrint(yy_.yytext);return 102; 
break;
case 60: debugPrint(yy_.yytext);return 101; 
break;
case 61: debugPrint(yy_.yytext);return 100; 
break;
case 62: debugPrint(yy_.yytext);return 99; 
break;
case 63: debugPrint(yy_.yytext);return 97; 
break;
case 64: debugPrint(yy_.yytext);return 98; 
break;
case 65: debugPrint(yy_.yytext);return 96; 
break;
case 66: debugPrint(yy_.yytext);return 85; 
break;
case 67: debugPrint(yy_.yytext);return 89; 
break;
case 68: debugPrint(yy_.yytext);return 90; 
break;
case 69: debugPrint(yy_.yytext);return 91; 
break;
case 70: debugPrint(yy_.yytext);return 92; 
break;
case 71: debugPrint(yy_.yytext);return 93; 
break;
case 72: debugPrint(yy_.yytext); return 21; 
break;
case 73:return 5
break;
case 74:  Utils.registrarErrorLexico(yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext, 'Caracter no válido.'); return 'INVALIDO' 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:\/\*[^'*']*\*\/)/,/^(?:\/\/[^\r\n]*[^\r\n])/,/^(?:\/\*[^"*"]\*\/)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:"(\\.|[^"])*")/,/^(?:'(\\.|[^'])')/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\^)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:typeof\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:toString\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:parse\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:([a-zA-Z]|_|\$)([a-zA-Z]|[0-9]|_|\$)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}