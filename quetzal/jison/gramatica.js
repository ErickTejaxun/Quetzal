/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[5,24,40,41,42,43,44,45],$V8=[2,46],$V9=[1,19],$Va=[24,30],$Vb=[15,25,29],$Vc=[2,27],$Vd=[1,35],$Ve=[1,25],$Vf=[1,59],$Vg=[1,58],$Vh=[1,57],$Vi=[1,61],$Vj=[1,31],$Vk=[1,26],$Vl=[1,27],$Vm=[1,28],$Vn=[1,29],$Vo=[1,30],$Vp=[1,32],$Vq=[1,33],$Vr=[1,34],$Vs=[1,36],$Vt=[1,37],$Vu=[1,38],$Vv=[1,39],$Vw=[1,40],$Vx=[1,41],$Vy=[1,60],$Vz=[1,62],$VA=[1,67],$VB=[2,5,24,34,35,40,41,42,43,44,45,47,48,50,52,56,57,58,59,60,69,74,75,76,77,78,79,80,81,100,101,107,112,116,117,118,119,120,121],$VC=[1,71],$VD=[1,72],$VE=[1,73],$VF=[1,74],$VG=[1,75],$VH=[1,76],$VI=[1,77],$VJ=[1,78],$VK=[1,79],$VL=[1,80],$VM=[1,81],$VN=[1,82],$VO=[1,83],$VP=[1,84],$VQ=[1,85],$VR=[1,86],$VS=[1,87],$VT=[15,29,31,37,46,51,52,53,54,55,61,62,63,64,65,66,67,68,70,71,72,73,98],$VU=[2,77],$VV=[1,101],$VW=[1,96],$VX=[1,98],$VY=[1,99],$VZ=[1,112],$V_=[29,37],$V$=[15,29,31,37,46,51,52,53,54,55,61,62,63,64,65,66,67,68,70,71,72,73],$V01=[15,29,30,31,37,46,51,52,53,54,55,61,62,63,64,65,66,67,68,70,71,72,73,98],$V11=[1,171],$V21=[1,174],$V31=[1,176],$V41=[1,172],$V51=[1,173],$V61=[1,177],$V71=[1,178],$V81=[1,179],$V91=[1,180],$Va1=[1,181],$Vb1=[1,182],$Vc1=[15,29,31,37,46,51,52,61,62,63,64,65,66,67,68,70,72,73],$Vd1=[15,29,31,37,46,51,52,53,54,55,61,62,63,64,65,66,67,68,70,72,73],$Ve1=[15,29,31,37,46,61,62,63,64,65,66,67,68,72,73],$Vf1=[15,29,31,37,46,67,68,72,73],$Vg1=[1,195],$Vh1=[1,196],$Vi1=[2,24,34,40,41,42,43,44,45,47,48,50,107,112,116,117,118,119,120,121],$Vj1=[1,210],$Vk1=[24,35,40,41,42,43,52,56,57,58,59,60,69,74,75,76,77,78,79,80,81,100,101],$Vl1=[1,261],$Vm1=[1,283],$Vn1=[1,286],$Vo1=[29,31],$Vp1=[47,116,118],$Vq1=[2,24,34,40,41,42,43,44,45,47,48,50,107,111,112,116,117,118,119,120,121];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONESG":4,"EOF":5,"INSTRUCCIONG":6,"FUNCION":7,"ASIGNACION":8,"DECLARACION":9,"INSTRUCCIONES":10,"INSTRUCCION":11,"PRINTLN":12,"PRINT":13,"LLAMADA":14,";":15,"RETORNO":16,"IFINST":17,"SWITCHINST":18,"BREAKINST":19,"WHILEINST":20,"DOWHILEINST":21,"DECLARACCIONARREGLO":22,"FORINST":23,"id":24,"=":25,"E":26,"TIPO":27,"LID":28,",":29,"[":30,"]":31,"EXPARREGLO":32,"LExprArreglo":33,"retorno":34,"(":35,"LPARAMETROS":36,")":37,"BLOQUE":38,"PARAMETRO":39,"tint":40,"tdouble":41,"tboolean":42,"tstring":43,"tchar":44,"tvoid":45,"{":46,"}":47,"println":48,"LExpr":49,"print":50,"+":51,"-":52,"*":53,"/":54,"%":55,"pow":56,"sqrt":57,"sin":58,"cos":59,"tan":60,">=":61,"<=":62,"!=":63,"==":64,">":65,"<":66,"||":67,"&&":68,"!":69,"&":70,"^":71,"?":72,":":73,"entero":74,"double":75,"texto":76,"caracter":77,"nulo":78,"verdadero":79,"falso":80,"tipode":81,"PARSEBOOL":82,"PARSEDOUBLE":83,"PARSEINT":84,"NATIVATOINT":85,"NATIVATOSTRING":86,"NATIVATODOUBLE":87,"LOWERCADENA":88,"UPPERCADENA":89,"LENGTHCADENA":90,"PORCIONCADENA":91,"POSICIONCADENA":92,"ACCESOARREGLO":93,"AUMENTO":94,"DECREMENTO":95,"LINDICES":96,"INDICE":97,".":98,"parse":99,"ToInt":100,"ToDouble":101,"caracterlower":102,"caracterupper":103,"caracterlength":104,"caracterporcion":105,"caracterposicion":106,"Rif":107,"ELSEIFINSTSS":108,"ELSEIFINST":109,"ELSEFINAL":110,"Relse":111,"Rswitch":112,"LISTACASE":113,"DEFAULTINST":114,"CASE":115,"Rcase":116,"Rbreak":117,"Rdefault":118,"Rwhile":119,"Rdo":120,"Rfor":121,"FOROPCIONES":122,"Rin":123,"ACTUALIZACION":124,"++":125,"--":126,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:";",24:"id",25:"=",29:",",30:"[",31:"]",34:"retorno",35:"(",37:")",40:"tint",41:"tdouble",42:"tboolean",43:"tstring",44:"tchar",45:"tvoid",46:"{",47:"}",48:"println",50:"print",51:"+",52:"-",53:"*",54:"/",55:"%",56:"pow",57:"sqrt",58:"sin",59:"cos",60:"tan",61:">=",62:"<=",63:"!=",64:"==",65:">",66:"<",67:"||",68:"&&",69:"!",70:"&",71:"^",72:"?",73:":",74:"entero",75:"double",76:"texto",77:"caracter",78:"nulo",79:"verdadero",80:"falso",81:"tipode",98:".",99:"parse",100:"ToInt",101:"ToDouble",102:"caracterlower",103:"caracterupper",104:"caracterlength",105:"caracterporcion",106:"caracterposicion",107:"Rif",111:"Relse",112:"Rswitch",116:"Rcase",117:"Rbreak",118:"Rdefault",119:"Rwhile",120:"Rdo",121:"Rfor",123:"Rin",125:"++",126:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[10,2],[10,1],[11,1],[11,1],[11,2],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[8,4],[9,3],[9,5],[28,3],[28,1],[22,7],[32,3],[33,3],[33,3],[33,1],[33,1],[16,3],[16,2],[7,6],[7,5],[36,3],[36,1],[39,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[38,3],[12,5],[13,5],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,6],[26,4],[26,4],[26,4],[26,4],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,3],[26,3],[26,5],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,4],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[93,2],[96,2],[96,1],[97,3],[14,3],[14,4],[49,3],[49,1],[82,6],[83,6],[84,6],[85,4],[87,4],[86,4],[88,5],[89,5],[90,5],[91,8],[92,6],[17,5],[17,5],[17,6],[108,2],[108,2],[108,1],[108,1],[110,2],[109,6],[18,8],[113,2],[113,1],[115,4],[19,2],[114,3],[114,0],[20,5],[21,7],[23,8],[23,5],[23,5],[23,10],[122,1],[122,1],[124,1],[124,1],[94,2],[95,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
		
	return new Raiz($$[$0-1].linea, $$[$0-1].columna, $$[$0-1]); 

break;
case 2: case 7:
 
				  	this.$ = $$[$0-1]; 
					this.$.registrarInstruccion($$[$0]);
				
break;
case 3:
 
					this.$ = new Bloque(_$[$0].first_line-1,_$[$0].first_column-1); 
					if($$[$0]!=null){this.$.registrarInstruccion($$[$0]);} // Si es nulo, viene de un error manejado en otras producciones.
				
break;
case 4: case 9: case 10:
 this.$ = $$[$0];
break;
case 5: case 6: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20:
this.$ = $$[$0];
break;
case 8:
 
							this.$ = new Bloque(_$[$0].first_line-1,_$[$0].first_column-1); 
							if($$[$0]!=null){this.$.registrarInstruccion($$[$0]);} // Si es nulo, viene de un error manejado en otras producciones.
						  
break;
case 11:
this.$ =$$[$0-1];
break;
case 21: case 101: case 140: case 141: case 142: case 143:
this.$=$$[$0];
break;
case 22:
 	
						Utils.registrarErrorSintactico(_$[$0].first_line-1,_$[$0].first_column-1, $$[$0], $$[$0]);
						this.$ = null;						
					
break;
case 23:
 this.$ = new Asignacion(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-3],$$[$0-1]); 
break;
case 24:
 this.$ = new Declaracion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0-1],null);
break;
case 25:
 this.$ = new Declaracion(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4],$$[$0-3],$$[$0-1]);
break;
case 26:
this.$  =$$[$0-2]; this.$.push($$[$0]);
break;
case 27:
 this.$ = new Array; this.$.push($$[$0]); 
break;
case 28:
this.$ = new DeclaracionArreglo(_$[$0-6].first_line-1,_$[$0-6].first_column-1,$$[$0-6],$$[$0-3],$$[$0-1]);
break;
case 29:
 this.$ =$$[$0-1];
break;
case 30: case 31: case 105:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 32: case 33: case 106:
this.$= new Array; this.$.push($$[$0]);
break;
case 34:
 this.$= new Retorno(_$[$0-2].first_line-1,_$[$0-2].first_column-1, $$[$0-1]);
break;
case 35:
 this.$= new Retorno(_$[$0-1].first_line-1,_$[$0-1].first_column-1, null);
break;
case 36:
 this.$ = new Funcion(_$[$0-5].first_line-1,_$[$0-5].first_column-1, $$[$0-5], $$[$0-4], $$[$0-2],$$[$0]);
break;
case 37:
 this.$ = new Funcion(_$[$0-4].first_line-1,_$[$0-4].first_column-1, $$[$0-4], $$[$0-3], new Array,$$[$0]);
break;
case 38:
this.$ =$$[$0-2]; this.$.push($$[$0]);
break;
case 39: case 129:
this.$ = new Array; this.$.push($$[$0]);
break;
case 40:
 this.$ = new Parametro(_$[$0-1].first_line-1,_$[$0-1].first_column-1, $$[$0-1], $$[$0]);
break;
case 41:
 this.$ = new Tipo(TipoPrimitivo.INT);
break;
case 42:
 this.$ = new Tipo(TipoPrimitivo.DOUBLE);
break;
case 43:
 this.$ = new Tipo(TipoPrimitivo.BOOL);
break;
case 44:
 this.$ = new Tipo(TipoPrimitivo.STRING);
break;
case 45:
 this.$ = new Tipo(TipoPrimitivo.CHAR);
break;
case 46:
this.$ = new Tipo(TipoPrimitivo.STRUCT, $$[$0]);
break;
case 47:
 this.$ = new Tipo(TipoPrimitivo.VOID);
break;
case 48:
this.$ = $$[$0-1]; 
break;
case 49:
				
			var nodo_concatenar = null;
			if($$[$0-2].length== 1)
			{
				nodo_concatenar = $$[$0-2][0];
			}				
			else
			{
				var nodoTmp = $$[$0-2][0]; // primer expresion
				var i = 1;
				for( i=1; i<$$[$0-2].length; i++)
				{
					var nodo = $$[$0-2][i];
					var nodoTmp = new Concatenar(nodoTmp.linea, nodoTmp.columna, nodoTmp, nodo);					
				}											
				nodo_concatenar = nodoTmp;
			}		
			this.$ = new Println(_$[$0-4].first_line-1,_$[$0-4].first_column-1, nodo_concatenar);						
		
break;
case 50:

			var nodo_concatenar = null;
			if($$[$0-2].length== 1)
			{
				nodo_concatenar = $$[$0-2][0];
			}				
			else
			{
				var nodoTmp = $$[$0-2][0]; // primer expresion
				var i = 1;
				for( i=1; i<$$[$0-2].length; i++)
				{
					var nodo = $$[$0-2][i];
					var nodoTmp = new Concatenar(nodoTmp.linea, nodoTmp.columna, nodoTmp, nodo);					
				}											
				nodo_concatenar = nodoTmp;
			}		
			this.$ = new Print(_$[$0-4].first_line-1,_$[$0-4].first_column-1, nodo_concatenar);			
		
break;
case 51:

		this.$ = $$[$0-1];		
	
break;
case 52:

		this.$ = new Suma(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);	
	
break;
case 53:

		this.$ = new Resta(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 54:

		this.$ = new Multiplicacion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 55:

		this.$ = new Division(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 56:

		this.$ = new Modulo(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 57:

		this.$ = new Potencia(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-3], $$[$0-1]);
	
break;
case 58:

		this.$ = new RaizCuadrada(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 59:

		this.$ = new Seno(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 60:

		this.$ = new Coseno(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 61:

		this.$ = new Tangente(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 62:

		this.$ = new Menos(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0]);
	
break;
case 63:

		this.$ = new MayorIgual(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 64:

		this.$ = new MenorIgual(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 65:

		this.$ = new Diferenciacion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 66:

		this.$ = new Igualdad(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 67:

		this.$ = new MayorQue(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 68:

		this.$ = new MenorQue(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 69:

		this.$ = new OrLog(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 70:

		this.$ = new AndLog(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 71:

		this.$ = new NotLog(_$[$0].first_line,_$[$0].first_column,$$[$0]);
	
break;
case 72:

		this.$ = new Concatenar(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 73:

		this.$ = new PotenciaString(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 74:

		this.$ = new Ternario(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4],$$[$0-2], $$[$0]);
	
break;
case 75:

		this.$ = new Entero(_$[$0].first_line-1,_$[$0].first_column-1, parseInt($$[$0]));
	
break;
case 76:

		this.$ = new Double(_$[$0].first_line-1,_$[$0].first_column-1, parseFloat($$[$0]));
	
break;
case 77:

		this.$ = new ExpVariable(_$[$0].first_line-1,_$[$0].first_column-1,$$[$0]);
	
break;
case 78:

		this.$ = new ExpString(_$[$0].first_line-1,_$[$0].first_column-1,$$[$0].substring(1,$$[$0].length-1));
		
	
break;
case 79:

		this.$ = new Caracter(_$[$0].first_line,_$[$0].first_column,$$[$0].substring(1,$$[$0].length-1));
	
break;
case 80:

		this.$ = new Nulo(_$[$0].first_line-1,_$[$0].first_column-1);
	
break;
case 81:

		this.$ = new ExpBooleana(_$[$0].first_line-1,_$[$0].first_column-1, true);
	
break;
case 82:

		this.$ = new ExpBooleana(_$[$0].first_line-1,_$[$0].first_column-1, false);
	
break;
case 83:

		this.$ = new TipoDe(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 123: case 124:
this.$= $$[$0];
break;
case 96: case 97: case 98:
this.$ =$$[$0];
break;
case 99:
this.$= new AccesoArreglo(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]),$$[$0]);
break;
case 100:
this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 102:
this.$ = new Array; this.$.push($$[$0-1]);
break;
case 103:
 this.$ = new Llamada(_$[$0-2].first_line-1,_$[$0-2].first_column-1, $$[$0-2], new Array);
break;
case 104:
 this.$ = new Llamada(_$[$0-3].first_line-1,_$[$0-3].first_column-1, $$[$0-3], $$[$0-1]);
break;
case 107:
 this.$ = new ParseBool(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 108:
 this.$ = new ParseDouble(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 109:
 this.$ = new ParseInt(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 110:
 this.$ = new NativaToInt(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 111:
 this.$ = new NativaToDouble(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 112:
 this.$ = new NativaToString(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 113:
 this.$ = new LowerCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 114:
 this.$ = new UpperCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 115:
 this.$ = new LengthCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 116:
 this.$ = new PorcionCadena(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-7],$$[$0-3],$$[$0-1]);
break;
case 117:
 this.$ = new PosicionCadena(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-5],$$[$0-1]);
break;
case 118:
this.$= new Si(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-2],$$[$0], null);
break;
case 119:
 
									var BloqueInstruccion = new Bloque(_$[$0-4].first_line-1,_$[$0-4].first_column-1); 
									BloqueInstruccion.registrarInstruccion($$[$0]);
									this.$= new Si(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-2],BloqueInstruccion, null);
								
break;
case 120:
 
									this.$= new Si(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-3],$$[$0-1], $$[$0]);
								
break;
case 121: case 122:
this.$= $$[$0-1];  this.$.sinosi = $$[$0];
break;
case 125:
this.$= new Si(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpBooleana(_$[$0-1].first_line-1,_$[$0-1].first_column-1,true),$$[$0],null); 
break;
case 126:
this.$= new Si(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-2],$$[$0], null);
break;
case 127:
 this.$= new SwitchInst(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-5],$$[$0-2],$$[$0-1]);
break;
case 128:
this.$ =$$[$0-1]; this.$.push($$[$0]);
break;
case 130:
 this.$= new CaseInst(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-2],$$[$0]);
break;
case 131:
 this.$= new BreakInst(_$[$0-1].first_line-1,_$[$0-1].first_column-1);
break;
case 132:
 this.$= new DefaultInst(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0]);
break;
case 134:
 this.$= new WhileInst(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-2],$$[$0]);
break;
case 135:
 this.$= new DoWhileInst(_$[$0-6].first_line-1,_$[$0-6].first_column-1,$$[$0-5],$$[$0-2]);
break;
case 136:
 this.$= new ForInst(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 137: case 138:
 this.$= new For2Inst(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-3],$$[$0-1],$$[$0]);
break;
case 139:
 this.$= new For3Inst(_$[$0-9].first_line-1,_$[$0-9].first_column-1,$$[$0-8], new ExpVariable(_$[$0-9].first_line-1,_$[$0-9].first_column-1,$$[$0-6]), new Limites(_$[$0-9].first_line-1,_$[$0-9].first_column-1,$$[$0-4],$$[$0-2]),$$[$0]);
break;
case 144:
this.$= new Aumento(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]));
break;
case 145:
this.$= new Decremento(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]));
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,24:$V0,27:7,40:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6},{1:[3]},{5:[1,15],6:16,7:4,8:5,9:6,24:$V0,27:7,40:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),{24:[1,17],28:18},{24:$V8,25:$V9},o($Va,[2,41]),o($Va,[2,42]),o($Va,[2,43]),o($Va,[2,44]),o($Va,[2,45]),o($Va,[2,47]),{1:[2,1]},o($V7,[2,2]),o($Vb,$Vc,{35:[1,20]}),{15:[1,21],25:[1,22],29:[1,23]},{14:48,24:$Vd,26:24,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{24:$VA,27:66,36:63,37:[1,64],39:65,40:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6},o($VB,[2,24]),{14:48,24:$Vd,26:68,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{24:[1,69]},{15:[1,70],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{14:48,24:$Vd,26:88,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{35:[1,89]},{35:[1,90]},{35:[1,91]},{35:[1,92]},{35:[1,93]},{14:48,24:$Vd,26:94,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:95,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},o($VT,[2,75]),o($VT,[2,76]),o($VT,$VU,{96:97,97:100,30:$VV,35:$VW,125:$VX,126:$VY}),o($VT,[2,78]),o($VT,[2,79]),o($VT,[2,80]),o($VT,[2,81]),o($VT,[2,82]),{35:[1,102]},o($VT,[2,84]),o($VT,[2,85]),o($VT,[2,86]),o($VT,[2,87]),o($VT,[2,88]),o($VT,[2,89]),o($VT,[2,90]),o($VT,[2,91]),o($VT,[2,92]),o($VT,[2,93]),o($VT,[2,94]),o($VT,[2,95]),o($VT,[2,96]),o($VT,[2,97]),o($VT,[2,98]),{98:[1,103]},{98:[1,104]},{98:[1,105]},{35:[1,106]},{35:[1,107]},{35:[1,108]},{29:[1,110],37:[1,109]},{38:111,46:$VZ},o($V_,[2,39]),{24:[1,113]},{24:$V8},{15:[1,114],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},o($Vb,[2,26]),o($VB,[2,23]),{14:48,24:$Vd,26:115,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:116,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:117,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:118,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:119,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:120,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:121,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:122,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:123,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:124,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:125,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:126,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:127,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:128,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:129,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:130,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{102:[1,131],103:[1,132],104:[1,133],105:[1,134],106:[1,135]},{37:[1,136],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{14:48,24:$Vd,26:137,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:138,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:139,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:140,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:141,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},o($V$,[2,62],{98:$VS}),o($V$,[2,71],{98:$VS}),{14:48,24:$Vd,26:144,35:$Ve,37:[1,142],40:$Vf,41:$Vg,42:$Vh,43:$Vi,49:143,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},o($VT,[2,99],{97:145,30:$VV}),o($VT,[2,144]),o($VT,[2,145]),o($V01,[2,101]),{14:48,24:$Vd,26:146,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:147,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{99:[1,148]},{99:[1,149]},{99:[1,150]},{14:48,24:$Vd,26:151,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:152,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:153,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{38:154,46:$VZ},{24:$VA,27:66,39:155,40:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6},o($V7,[2,37]),{2:$V11,8:161,9:162,10:156,11:157,12:158,13:159,14:160,16:163,17:164,18:165,19:166,20:167,21:168,22:169,23:170,24:$V21,27:175,34:$V31,40:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,48:$V41,50:$V51,107:$V61,112:$V71,117:$V81,119:$V91,120:$Va1,121:$Vb1},o($V_,[2,40]),o($VB,[2,25]),o($Vc1,[2,52],{53:$VE,54:$VF,55:$VG,71:$VQ,98:$VS}),o($Vc1,[2,53],{53:$VE,54:$VF,55:$VG,71:$VQ,98:$VS}),o($Vd1,[2,54],{71:$VQ,98:$VS}),o($Vd1,[2,55],{71:$VQ,98:$VS}),o($Vd1,[2,56],{71:$VQ,98:$VS}),o($Ve1,[2,63],{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,70:$VP,71:$VQ,98:$VS}),o($Ve1,[2,64],{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,70:$VP,71:$VQ,98:$VS}),o($Ve1,[2,65],{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,70:$VP,71:$VQ,98:$VS}),o($Ve1,[2,66],{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,70:$VP,71:$VQ,98:$VS}),o($Ve1,[2,67],{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,70:$VP,71:$VQ,98:$VS}),o($Ve1,[2,68],{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,70:$VP,71:$VQ,98:$VS}),o($Vf1,[2,69],{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,70:$VP,71:$VQ,98:$VS}),o($Vf1,[2,70],{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,70:$VP,71:$VQ,98:$VS}),o($Vc1,[2,72],{53:$VE,54:$VF,55:$VG,71:$VQ,98:$VS}),o($V$,[2,73],{98:$VS}),{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,73:[1,183],98:$VS},{35:[1,184]},{35:[1,185]},{35:[1,186]},{35:[1,187]},{35:[1,188]},o($VT,[2,51]),{29:[1,189],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{37:[1,190],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{37:[1,191],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{37:[1,192],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{37:[1,193],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},o($VT,[2,103]),{29:$Vg1,37:[1,194]},o($V_,[2,106],{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS}),o($V01,[2,100]),{31:$Vh1,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{37:[1,197],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{35:[1,198]},{35:[1,199]},{35:[1,200]},{37:[1,201],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{37:[1,202],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{37:[1,203],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},o($V7,[2,36]),o($V_,[2,38]),{2:$V11,8:161,9:162,11:205,12:158,13:159,14:160,16:163,17:164,18:165,19:166,20:167,21:168,22:169,23:170,24:$V21,27:175,34:$V31,40:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,47:[1,204],48:$V41,50:$V51,107:$V61,112:$V71,117:$V81,119:$V91,120:$Va1,121:$Vb1},o($Vi1,[2,8]),o($Vi1,[2,9]),o($Vi1,[2,10]),{15:[1,206]},o($Vi1,[2,12]),o($Vi1,[2,13]),o($Vi1,[2,14]),o($Vi1,[2,15]),o($Vi1,[2,16]),o($Vi1,[2,17]),o($Vi1,[2,18]),o($Vi1,[2,19]),o($Vi1,[2,20]),o($Vi1,[2,21]),o($Vi1,[2,22]),{35:[1,207]},{35:[1,208]},o($Va,$V8,{25:$V9,35:$VW}),{24:$Vj1,28:18,30:[1,209]},{14:48,15:[1,212],24:$Vd,26:211,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{35:[1,213]},{35:[1,214]},{15:[1,215]},{35:[1,216]},{38:217,46:$VZ},{24:[1,219],35:[1,218]},{14:48,24:$Vd,26:220,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{37:[1,221]},{37:[1,222]},{37:[1,223]},{14:48,24:$Vd,26:224,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:225,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:226,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},o($VT,[2,58]),o($VT,[2,59]),o($VT,[2,60]),o($VT,[2,61]),o($VT,[2,104]),{14:48,24:$Vd,26:227,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},o($V01,[2,102]),o($VT,[2,83]),{14:48,24:$Vd,26:228,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:229,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:230,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},o($VT,[2,110]),o($VT,[2,112]),o($VT,[2,111]),o([2,5,24,34,40,41,42,43,44,45,47,48,50,107,111,112,116,117,118,119,120,121],[2,48]),o($Vi1,[2,7]),o($Vi1,[2,11]),{14:48,24:$Vd,26:144,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,49:231,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:144,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,49:232,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{31:[1,233]},o($Vb,$Vc),{15:[1,234],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},o($Vi1,[2,35]),{14:48,24:$Vd,26:235,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:236,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},o($Vi1,[2,131]),{14:48,24:$Vd,26:237,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{119:[1,238]},{8:240,9:241,24:$V0,27:242,40:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,122:239},{123:[1,243]},o([15,29,31,37,46,72,73],[2,74],{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,98:$VS}),o($VT,[2,113]),o($VT,[2,114]),o($VT,[2,115]),{29:[1,244],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{37:[1,245],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{37:[1,246],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},o($V_,[2,105],{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS}),{37:[1,247],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{37:[1,248],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{37:[1,249],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{29:$Vg1,37:[1,250]},{29:$Vg1,37:[1,251]},{24:[1,252]},o($Vi1,[2,34]),{37:[1,253],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{37:[1,254],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{37:[1,255],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{35:[1,256]},{14:48,24:$Vd,26:257,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},o($Vk1,[2,140]),o($Vk1,[2,141]),{24:$Vj1,28:18},{14:48,24:[1,260],26:258,30:$Vl1,32:259,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{14:48,24:$Vd,26:262,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},o($VT,[2,117]),o($VT,[2,57]),o($VT,[2,107]),o($VT,[2,108]),o($VT,[2,109]),{15:[1,263]},{15:[1,264]},{25:[1,265]},{2:$V11,8:161,9:162,11:267,12:158,13:159,14:160,16:163,17:164,18:165,19:166,20:167,21:168,22:169,23:170,24:$V21,27:175,34:$V31,38:266,40:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,46:$VZ,48:$V41,50:$V51,107:$V61,112:$V71,117:$V81,119:$V91,120:$Va1,121:$Vb1},{46:[1,268]},{38:269,46:$VZ},{14:48,24:$Vd,26:270,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{15:[1,271],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{38:272,46:$VZ,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{38:273,46:$VZ},o([46,51,52,53,54,55,61,62,63,64,65,66,67,68,70,71,72,98],$VU,{96:97,97:100,30:[1,274],35:$VW,125:$VX,126:$VY}),{14:48,24:$Vd,26:276,30:$Vl1,32:277,33:275,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{37:[1,278],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},o($Vi1,[2,49]),o($Vi1,[2,50]),{30:$Vl1,32:279},o($Vi1,[2,118],{108:280,109:281,110:282,111:$Vm1}),o($Vi1,[2,119]),{113:284,115:285,116:$Vn1},o($Vi1,[2,134]),{37:[1,287],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{14:48,24:$Vd,26:288,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},o($Vi1,[2,137]),o($Vi1,[2,138]),{14:48,24:$Vd,26:289,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{29:[1,291],31:[1,290]},o($Vo1,[2,32],{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS}),o($Vo1,[2,33]),o($VT,[2,116]),{15:[1,292]},o($Vi1,[2,120]),o($Vi1,[2,123],{109:281,110:282,108:293,111:$Vm1}),o($Vi1,[2,124],{109:281,110:282,108:294,111:$Vm1}),{38:296,46:$VZ,107:[1,295]},{47:[2,133],114:297,115:298,116:$Vn1,118:[1,299]},o($Vp1,[2,129]),{14:48,24:$Vd,26:300,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},{15:[1,301]},{37:[1,302],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{31:$Vh1,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,73:[1,303],98:$VS},o([15,29,31,46],[2,29]),{14:48,24:$Vd,26:304,30:$Vl1,32:305,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},o($Vi1,[2,28]),o($Vi1,[2,121]),o($Vi1,[2,122]),{35:[1,306]},o($Vq1,[2,125]),{47:[1,307]},o($Vp1,[2,128]),{73:[1,308]},{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,73:[1,309],98:$VS},o($Vi1,[2,135]),{38:310,46:$VZ},{14:48,24:$Vd,26:311,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},o($Vo1,[2,30],{51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS}),o($Vo1,[2,31]),{14:48,24:$Vd,26:312,35:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,52:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,69:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx,82:42,83:43,84:44,85:45,86:46,87:47,88:49,89:50,90:51,91:52,92:53,93:54,94:55,95:56,100:$Vy,101:$Vz},o($Vi1,[2,127]),{2:$V11,8:161,9:162,10:313,11:157,12:158,13:159,14:160,16:163,17:164,18:165,19:166,20:167,21:168,22:169,23:170,24:$V21,27:175,34:$V31,40:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,48:$V41,50:$V51,107:$V61,112:$V71,117:$V81,119:$V91,120:$Va1,121:$Vb1},{2:$V11,8:161,9:162,10:314,11:157,12:158,13:159,14:160,16:163,17:164,18:165,19:166,20:167,21:168,22:169,23:170,24:$V21,27:175,34:$V31,40:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,48:$V41,50:$V51,107:$V61,112:$V71,117:$V81,119:$V91,120:$Va1,121:$Vb1},o($Vi1,[2,136]),{31:[1,315],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{37:[1,316],51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VP,71:$VQ,72:$VR,98:$VS},{2:$V11,8:161,9:162,11:205,12:158,13:159,14:160,16:163,17:164,18:165,19:166,20:167,21:168,22:169,23:170,24:$V21,27:175,34:$V31,40:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,47:[2,132],48:$V41,50:$V51,107:$V61,112:$V71,117:$V81,119:$V91,120:$Va1,121:$Vb1},o($Vp1,[2,130],{12:158,13:159,14:160,8:161,9:162,16:163,17:164,18:165,19:166,20:167,21:168,22:169,23:170,27:175,11:205,2:$V11,24:$V21,34:$V31,40:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,48:$V41,50:$V51,107:$V61,112:$V71,117:$V81,119:$V91,120:$Va1,121:$Vb1}),{38:317,46:$VZ},{38:318,46:$VZ},o($Vi1,[2,139]),o($Vq1,[2,126])],
defaultActions: {15:[2,1],67:[2,46]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var debugMode = false;
	function debugPrint(valor)
	{
		if(debugMode)
		{
			debugPrint(valor);
		}
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitve":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:return;
break;
case 4:return;
break;
case 5:return;
break;
case 6:return 75
break;
case 7:return 74
break;
case 8:return 76	  
break;
case 9:return 77
break;
case 10: debugPrint('>');return 65; 
break;
case 11: debugPrint('<');return 66; 
break;
case 12: debugPrint('>=');return 61; 
break;
case 13: debugPrint('<=');return 62; 
break;
case 14: debugPrint('==');return 64; 
break;
case 15: debugPrint('!=');return 63; 
break;
case 16: debugPrint('||');return 67; 
break;
case 17: debugPrint('?');return 72; 
break;
case 18: debugPrint('&&');return 68; 
break;
case 19: debugPrint('&');return 70; 
break;
case 20: debugPrint('!');return 69; 
break;
case 21: debugPrint('*');return 53; 
break;
case 22: debugPrint('/');return 54; 
break;
case 23: debugPrint('++');return 125; 
break;
case 24: debugPrint('--');return 126; 
break;
case 25: debugPrint('-');return 52; 
break;
case 26: debugPrint('+');return 51; 
break;
case 27: debugPrint('%');return 55; 
break;
case 28: debugPrint('^');return 71; 
break;
case 29: debugPrint('=');return 25; 
break;
case 30: debugPrint('(');return 35; 
break;
case 31: debugPrint(')');return 37; 
break;
case 32: debugPrint('{');return 46; 
break;
case 33: debugPrint('}');return 47; 
break;
case 34: debugPrint('[');return 30; 
break;
case 35: debugPrint(']');return 31; 
break;
case 36: debugPrint(',');return 29; 
break;
case 37: debugPrint('.');return 98; 
break;
case 38: debugPrint(':');return 73; 
break;
case 39: debugPrint(';');return 15; 
break;
case 40: debugPrint(yy_.yytext);return 78; 
break;
case 41: debugPrint(yy_.yytext);return 79; 
break;
case 42: debugPrint(yy_.yytext);return 80; 
break;
case 43: debugPrint(yy_.yytext);return 48; 
break;
case 44: debugPrint(yy_.yytext);return 50; 
break;
case 45: debugPrint(yy_.yytext);return 81; 
break;
case 46: debugPrint(yy_.yytext);return 'tnull'; 
break;
case 47: debugPrint(yy_.yytext);return 40; 
break;
case 48: debugPrint(yy_.yytext);return 41; 
break;
case 49: debugPrint(yy_.yytext);return 43; 
break;
case 50: debugPrint(yy_.yytext);return 45; 
break;
case 51: debugPrint(yy_.yytext);return 43; 
break;
case 52: debugPrint(yy_.yytext);return 45; 
break;
case 53: debugPrint(yy_.yytext);return 34; 
break;
case 54: debugPrint(yy_.yytext);return 56; 
break;
case 55: debugPrint(yy_.yytext);return 57; 
break;
case 56: debugPrint(yy_.yytext);return 58; 
break;
case 57: debugPrint(yy_.yytext);return 59; 
break;
case 58: debugPrint(yy_.yytext);return 60; 
break;
case 59: debugPrint(yy_.yytext);return 106; 
break;
case 60: debugPrint(yy_.yytext);return 105; 
break;
case 61: debugPrint(yy_.yytext);return 104; 
break;
case 62: debugPrint(yy_.yytext);return 103; 
break;
case 63: debugPrint(yy_.yytext);return 102; 
break;
case 64: debugPrint(yy_.yytext);return 'ToString'; 
break;
case 65: debugPrint(yy_.yytext);return 100; 
break;
case 66: debugPrint(yy_.yytext);return 101; 
break;
case 67: debugPrint(yy_.yytext);return 99; 
break;
case 68: debugPrint(yy_.yytext);return 112; 
break;
case 69: debugPrint(yy_.yytext);return 116; 
break;
case 70: debugPrint(yy_.yytext);return 117; 
break;
case 71: debugPrint(yy_.yytext);return 118; 
break;
case 72: debugPrint(yy_.yytext);return 119; 
break;
case 73: debugPrint(yy_.yytext);return 120; 
break;
case 74: debugPrint(yy_.yytext);return 107; 
break;
case 75: debugPrint(yy_.yytext);return 111; 
break;
case 76: debugPrint(yy_.yytext);return 121; 
break;
case 77: debugPrint(yy_.yytext);return 123; 
break;
case 78: debugPrint(yy_.yytext); return 24; 
break;
case 79:return 5
break;
case 80:  Utils.registrarErrorLexico(yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext, 'Caracter no válido.'); return 'INVALIDO' 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:\/\*[^'*']*\*\/)/,/^(?:\/\/[^\r\n]*[^\r\n])/,/^(?:\/\*[^"*"]\*\/)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:"(\\.|[^"])*")/,/^(?:'(\\.|[^'])')/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\^)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:typeof\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:toString\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:parse\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:([a-zA-Z]|_|\$)([a-zA-Z]|[0-9]|_|\$)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}