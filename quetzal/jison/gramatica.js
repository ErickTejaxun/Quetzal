/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[5,34,48,49,50,51,52,53],$V8=[1,20],$V9=[1,21],$Va=[34,40],$Vb=[2,49],$Vc=[2,50],$Vd=[2,51],$Ve=[2,52],$Vf=[16,35,39],$Vg=[2,35],$Vh=[1,28],$Vi=[1,38],$Vj=[1,62],$Vk=[1,61],$Vl=[1,60],$Vm=[1,64],$Vn=[1,34],$Vo=[1,29],$Vp=[1,30],$Vq=[1,31],$Vr=[1,32],$Vs=[1,33],$Vt=[1,35],$Vu=[1,36],$Vv=[1,37],$Vw=[1,39],$Vx=[1,40],$Vy=[1,41],$Vz=[1,42],$VA=[1,43],$VB=[1,44],$VC=[1,63],$VD=[1,65],$VE=[2,5,32,34,44,48,49,50,51,52,53,55,56,58,60,64,65,66,67,68,77,82,83,84,85,86,87,88,89,109,110,116,121,125,126,127,128,129,130,131],$VF=[1,90],$VG=[1,74],$VH=[1,75],$VI=[1,76],$VJ=[1,77],$VK=[1,78],$VL=[1,79],$VM=[1,80],$VN=[1,81],$VO=[1,82],$VP=[1,83],$VQ=[1,84],$VR=[1,85],$VS=[1,86],$VT=[1,87],$VU=[1,88],$VV=[1,89],$VW=[16,30,33,39,41,54,59,60,61,62,63,69,70,71,72,73,74,75,76,78,79,80,81],$VX=[2,84],$VY=[1,99],$VZ=[1,104],$V_=[1,101],$V$=[1,102],$V01=[2,97],$V11=[2,103],$V21=[2,104],$V31=[2,105],$V41=[1,106],$V51=[1,107],$V61=[1,108],$V71=[1,110],$V81=[1,115],$V91=[33,39],$Va1=[1,135],$Vb1=[1,136],$Vc1=[1,137],$Vd1=[1,138],$Ve1=[1,139],$Vf1=[1,140],$Vg1=[16,33,39,41,54,59,60,61,62,63,69,70,71,72,73,74,75,76,78,79,80,81],$Vh1=[16,30,33,35,39,40,41,54,59,60,61,62,63,69,70,71,72,73,74,75,76,78,79,80,81],$Vi1=[1,184],$Vj1=[1,187],$Vk1=[1,190],$Vl1=[1,199],$Vm1=[1,200],$Vn1=[1,201],$Vo1=[1,202],$Vp1=[1,185],$Vq1=[1,186],$Vr1=[1,191],$Vs1=[1,192],$Vt1=[1,193],$Vu1=[1,194],$Vv1=[1,195],$Vw1=[1,196],$Vx1=[1,197],$Vy1=[1,204],$Vz1=[16,33,39,41,54,59,60,69,70,71,72,73,74,75,76,78,80,81],$VA1=[16,33,39,41,54,59,60,61,62,63,69,70,71,72,73,74,75,76,78,80,81],$VB1=[16,33,39,41,54,69,70,71,72,73,74,75,76,80,81],$VC1=[16,33,39,41,54,75,76,80,81],$VD1=[1,218],$VE1=[1,221],$VF1=[2,32,34,44,48,49,50,51,52,53,55,56,58,60,64,65,66,67,68,77,82,83,84,85,86,87,88,89,109,110,116,121,125,126,127,128,129,130,131],$VG1=[30,59,60,61,62,63,69,70,71,72,73,74,75,76,78,79,80],$VH1=[1,237],$VI1=[39,41],$VJ1=[32,34,48,49,50,51,60,64,65,66,67,68,77,82,83,84,85,86,87,88,89,109,110],$VK1=[1,320],$VL1=[1,323],$VM1=[55,125,127],$VN1=[2,32,34,44,48,49,50,51,52,53,55,56,58,60,64,65,66,67,68,77,82,83,84,85,86,87,88,89,109,110,116,120,121,125,126,127,128,129,130,131];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONESG":4,"EOF":5,"INSTRUCCIONG":6,"FUNCION":7,"ASIGNACION":8,"DECLARACION":9,"DECLARACIONARREGLO":10,"INSTRUCCIONES":11,"INSTRUCCION":12,"PRINTLN":13,"PRINT":14,"LLAMADA":15,";":16,"ASIGNACIONARREGLO":17,"RETORNO":18,"IFINST":19,"SWITCHINST":20,"BREAKINST":21,"WHILEINST":22,"DOWHILEINST":23,"AUMENTO":24,"DECREMENTO":25,"CONTINUEINST":26,"FORINST":27,"PUSH":28,"E":29,".":30,"Rpush":31,"(":32,")":33,"id":34,"=":35,"ACCESOARREGLO":36,"TIPO":37,"LID":38,",":39,"[":40,"]":41,"EXPARREGLO":42,"LExprArreglo":43,"retorno":44,"LPARAMETROS":45,"BLOQUE":46,"PARAMETRO":47,"tint":48,"tdouble":49,"tboolean":50,"tstring":51,"tchar":52,"tvoid":53,"{":54,"}":55,"println":56,"LExpr":57,"print":58,"+":59,"-":60,"*":61,"/":62,"%":63,"pow":64,"sqrt":65,"sin":66,"cos":67,"tan":68,">=":69,"<=":70,"!=":71,"==":72,">":73,"<":74,"||":75,"&&":76,"!":77,"&":78,"^":79,"?":80,":":81,"entero":82,"double":83,"texto":84,"caracter":85,"nulo":86,"verdadero":87,"falso":88,"tipode":89,"PARSEBOOL":90,"PARSEDOUBLE":91,"PARSEINT":92,"NATIVATOINT":93,"NATIVATOSTRING":94,"NATIVATODOUBLE":95,"LOWERCADENA":96,"UPPERCADENA":97,"LENGTHCADENA":98,"PORCIONCADENA":99,"POSICIONCADENA":100,"Rpop":101,"LINDICES":102,"INDICE":103,"INICIOA":104,"FINA":105,"Rbegin":106,"Rend":107,"parse":108,"ToInt":109,"ToDouble":110,"caracterlower":111,"caracterupper":112,"caracterlength":113,"caracterporcion":114,"caracterposicion":115,"Rif":116,"ELSEIFINSTSS":117,"ELSEIFINST":118,"ELSEFINAL":119,"Relse":120,"Rswitch":121,"LISTACASE":122,"DEFAULTINST":123,"CASE":124,"Rcase":125,"Rbreak":126,"Rdefault":127,"Rwhile":128,"Rdo":129,"Rcontinue":130,"Rfor":131,"FOROPCIONES":132,"Rin":133,"ACTUALIZACION":134,"++":135,"--":136,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:";",30:".",31:"Rpush",32:"(",33:")",34:"id",35:"=",39:",",40:"[",41:"]",44:"retorno",48:"tint",49:"tdouble",50:"tboolean",51:"tstring",52:"tchar",53:"tvoid",54:"{",55:"}",56:"println",58:"print",59:"+",60:"-",61:"*",62:"/",63:"%",64:"pow",65:"sqrt",66:"sin",67:"cos",68:"tan",69:">=",70:"<=",71:"!=",72:"==",73:">",74:"<",75:"||",76:"&&",77:"!",78:"&",79:"^",80:"?",81:":",82:"entero",83:"double",84:"texto",85:"caracter",86:"nulo",87:"verdadero",88:"falso",89:"tipode",101:"Rpop",106:"Rbegin",107:"Rend",108:"parse",109:"ToInt",110:"ToDouble",111:"caracterlower",112:"caracterupper",113:"caracterlength",114:"caracterporcion",115:"caracterposicion",116:"Rif",120:"Relse",121:"Rswitch",125:"Rcase",126:"Rbreak",127:"Rdefault",128:"Rwhile",129:"Rdo",130:"Rcontinue",131:"Rfor",133:"Rin",135:"++",136:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[11,2],[11,1],[12,1],[12,1],[12,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,1],[12,1],[12,1],[12,1],[12,1],[28,7],[8,4],[17,4],[9,3],[9,5],[38,3],[38,1],[10,7],[42,3],[43,3],[43,3],[43,1],[43,1],[18,3],[18,2],[7,6],[7,5],[45,3],[45,1],[47,2],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[46,3],[13,5],[14,5],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,6],[29,4],[29,4],[29,4],[29,4],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,3],[29,3],[29,5],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,4],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,5],[36,2],[102,2],[102,1],[102,5],[103,3],[104,1],[104,1],[105,1],[105,1],[15,3],[15,4],[57,3],[57,1],[90,6],[91,6],[92,6],[93,4],[95,4],[94,4],[96,5],[97,5],[98,5],[99,8],[100,6],[19,5],[19,5],[19,6],[117,2],[117,2],[117,1],[117,1],[119,2],[118,6],[20,8],[122,2],[122,1],[124,4],[21,2],[123,3],[123,0],[22,5],[23,7],[26,2],[27,8],[27,5],[27,5],[132,1],[132,1],[134,1],[134,1],[24,2],[25,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
		
	return new Raiz($$[$0-1].linea, $$[$0-1].columna, $$[$0-1]); 

break;
case 2: case 8:
 
				  	this.$ = $$[$0-1]; 
					this.$.registrarInstruccion($$[$0]);
				
break;
case 3:
 
					this.$ = new Bloque(_$[$0].first_line-1,_$[$0].first_column-1); 
					if($$[$0]!=null){this.$.registrarInstruccion($$[$0]);} // Si es nulo, viene de un error manejado en otras producciones.
				
break;
case 4: case 10: case 11:
 this.$ = $$[$0];
break;
case 5: case 6: case 7: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 25: case 109:
this.$ = $$[$0];
break;
case 9:
 
							this.$ = new Bloque(_$[$0].first_line-1,_$[$0].first_column-1); 
							if($$[$0]!=null){this.$.registrarInstruccion($$[$0]);} // Si es nulo, viene de un error manejado en otras producciones.
						  
break;
case 12: case 22: case 23:
this.$ =$$[$0-1];
break;
case 24: case 103: case 104: case 105:
this.$ =$$[$0];
break;
case 26: case 27: case 153: case 154: case 155: case 156:
this.$=$$[$0];
break;
case 28:
 	
						Utils.registrarErrorSintactico(_$[$0].first_line-1,_$[$0].first_column-1, $$[$0], $$[$0]);
						this.$ = null;						
					
break;
case 29:
 this.$ = new Push(_$[$0-6].first_line-1,_$[$0-6].first_column-1, $$[$0-6],$$[$0-2]);
break;
case 30:
 this.$ = new Asignacion(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-3],$$[$0-1]); 
break;
case 32:
 this.$ = new Declaracion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0-1],null);
break;
case 33:
 this.$ = new Declaracion(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4],$$[$0-3],$$[$0-1]);
break;
case 34:
this.$  =$$[$0-2]; this.$.push($$[$0]);
break;
case 35:
 this.$ = new Array; this.$.push($$[$0]); 
break;
case 36:
this.$ = new DeclaracionArreglo(_$[$0-6].first_line-1,_$[$0-6].first_column-1,$$[$0-6],$$[$0-3],$$[$0-1]);
break;
case 37:
 this.$ =$$[$0-1];
break;
case 38: case 39: case 118:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 40: case 41: case 119:
this.$= new Array; this.$.push($$[$0]);
break;
case 42:
 this.$= new Retorno(_$[$0-2].first_line-1,_$[$0-2].first_column-1, $$[$0-1]);
break;
case 43:
 this.$= new Retorno(_$[$0-1].first_line-1,_$[$0-1].first_column-1, null);
break;
case 44:
 this.$ = new Funcion(_$[$0-5].first_line-1,_$[$0-5].first_column-1, $$[$0-5], $$[$0-4], $$[$0-2],$$[$0]);
break;
case 45:
 this.$ = new Funcion(_$[$0-4].first_line-1,_$[$0-4].first_column-1, $$[$0-4], $$[$0-3], new Array,$$[$0]);
break;
case 46:
this.$ =$$[$0-2]; this.$.push($$[$0]);
break;
case 47: case 142:
this.$ = new Array; this.$.push($$[$0]);
break;
case 48:
 this.$ = new Parametro(_$[$0-1].first_line-1,_$[$0-1].first_column-1, $$[$0-1], $$[$0]);
break;
case 49:
 this.$ = new Tipo(TipoPrimitivo.INT);
break;
case 50:
 this.$ = new Tipo(TipoPrimitivo.DOUBLE);
break;
case 51:
 this.$ = new Tipo(TipoPrimitivo.BOOL);
break;
case 52:
 this.$ = new Tipo(TipoPrimitivo.STRING);
break;
case 53:
 this.$ = new Tipo(TipoPrimitivo.CHAR);
break;
case 54:
 this.$ = new Tipo(TipoPrimitivo.VOID);
break;
case 55:
this.$ = $$[$0-1]; 
break;
case 56:
				
			var nodo_concatenar = null;
			if($$[$0-2].length== 1)
			{
				nodo_concatenar = $$[$0-2][0];
			}				
			else
			{
				var nodoTmp = $$[$0-2][0]; // primer expresion
				var i = 1;
				for( i=1; i<$$[$0-2].length; i++)
				{
					var nodo = $$[$0-2][i];
					var nodoTmp = new Concatenar(nodoTmp.linea, nodoTmp.columna, nodoTmp, nodo);					
				}											
				nodo_concatenar = nodoTmp;
			}		
			this.$ = new Println(_$[$0-4].first_line-1,_$[$0-4].first_column-1, nodo_concatenar);						
		
break;
case 57:

			var nodo_concatenar = null;
			if($$[$0-2].length== 1)
			{
				nodo_concatenar = $$[$0-2][0];
			}				
			else
			{
				var nodoTmp = $$[$0-2][0]; // primer expresion
				var i = 1;
				for( i=1; i<$$[$0-2].length; i++)
				{
					var nodo = $$[$0-2][i];
					var nodoTmp = new Concatenar(nodoTmp.linea, nodoTmp.columna, nodoTmp, nodo);					
				}											
				nodo_concatenar = nodoTmp;
			}		
			this.$ = new Print(_$[$0-4].first_line-1,_$[$0-4].first_column-1, nodo_concatenar);			
		
break;
case 58:

		this.$ = $$[$0-1];		
	
break;
case 59:

		this.$ = new Suma(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);	
	
break;
case 60:

		this.$ = new Resta(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 61:

		this.$ = new Multiplicacion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 62:

		this.$ = new Division(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 63:

		this.$ = new Modulo(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 64:

		this.$ = new Potencia(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-3], $$[$0-1]);
	
break;
case 65:

		this.$ = new RaizCuadrada(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 66:

		this.$ = new Seno(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 67:

		this.$ = new Coseno(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 68:

		this.$ = new Tangente(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 69:

		this.$ = new Menos(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0]);
	
break;
case 70:

		this.$ = new MayorIgual(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 71:

		this.$ = new MenorIgual(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 72:

		this.$ = new Diferenciacion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 73:

		this.$ = new Igualdad(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 74:

		this.$ = new MayorQue(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 75:

		this.$ = new MenorQue(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 76:

		this.$ = new OrLog(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 77:

		this.$ = new AndLog(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 78:

		this.$ = new NotLog(_$[$0].first_line,_$[$0].first_column,$$[$0]);
	
break;
case 79:

		this.$ = new Concatenar(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 80:

		this.$ = new PotenciaString(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 81:

		this.$ = new Ternario(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4],$$[$0-2], $$[$0]);
	
break;
case 82:

		this.$ = new Entero(_$[$0].first_line-1,_$[$0].first_column-1, parseInt($$[$0]));
	
break;
case 83:

		this.$ = new Double(_$[$0].first_line-1,_$[$0].first_column-1, parseFloat($$[$0]));
	
break;
case 84:

		this.$ = new ExpVariable(_$[$0].first_line-1,_$[$0].first_column-1,$$[$0]);
	
break;
case 85:

		this.$ = new ExpString(_$[$0].first_line-1,_$[$0].first_column-1,$$[$0].substring(1,$$[$0].length-1));
		
	
break;
case 86:

		this.$ = new Caracter(_$[$0].first_line,_$[$0].first_column,$$[$0].substring(1,$$[$0].length-1));
	
break;
case 87:

		this.$ = new Nulo(_$[$0].first_line-1,_$[$0].first_column-1);
	
break;
case 88:

		this.$ = new ExpBooleana(_$[$0].first_line-1,_$[$0].first_column-1, true);
	
break;
case 89:

		this.$ = new ExpBooleana(_$[$0].first_line-1,_$[$0].first_column-1, false);
	
break;
case 90:

		this.$ = new TipoDe(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 112: case 114: case 136: case 137:
this.$= $$[$0];
break;
case 106:
 this.$ = new Pop(_$[$0-4].first_line-1,_$[$0-4].first_column-1, $$[$0-4]);
break;
case 107:
this.$= new AccesoArreglo(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]),$$[$0]);
break;
case 108:
this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 110:
 this.$= new Limites(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-3],$$[$0-1]);
break;
case 111:
this.$ = new Array; this.$.push($$[$0-1]);
break;
case 113: case 115:
this.$=null;
break;
case 116:
 this.$ = new Llamada(_$[$0-2].first_line-1,_$[$0-2].first_column-1, $$[$0-2], new Array);
break;
case 117:
 this.$ = new Llamada(_$[$0-3].first_line-1,_$[$0-3].first_column-1, $$[$0-3], $$[$0-1]);
break;
case 120:
 this.$ = new ParseBool(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 121:
 this.$ = new ParseDouble(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 122:
 this.$ = new ParseInt(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 123:
 this.$ = new NativaToInt(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 124:
 this.$ = new NativaToDouble(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 125:
 this.$ = new NativaToString(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 126:
 this.$ = new LowerCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 127:
 this.$ = new UpperCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 128:
 this.$ = new LengthCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 129:
 this.$ = new PorcionCadena(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-7],$$[$0-3],$$[$0-1]);
break;
case 130:
 this.$ = new PosicionCadena(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-5],$$[$0-1]);
break;
case 131:
this.$= new Si(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-2],$$[$0], null);
break;
case 132:
 
									var BloqueInstruccion = new Bloque(_$[$0-4].first_line-1,_$[$0-4].first_column-1); 
									BloqueInstruccion.registrarInstruccion($$[$0]);
									this.$= new Si(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-2],BloqueInstruccion, null);
								
break;
case 133:
 
									this.$= new Si(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-3],$$[$0-1], $$[$0]);
								
break;
case 134: case 135:
this.$= $$[$0-1];  this.$.sinosi = $$[$0];
break;
case 138:
this.$= new Si(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpBooleana(_$[$0-1].first_line-1,_$[$0-1].first_column-1,true),$$[$0],null); 
break;
case 139:
this.$= new Si(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-2],$$[$0], null);
break;
case 140:
 this.$= new SwitchInst(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-5],$$[$0-2],$$[$0-1]);
break;
case 141:
this.$ =$$[$0-1]; this.$.push($$[$0]);
break;
case 143:
 this.$= new CaseInst(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-2],$$[$0]);
break;
case 144:
 this.$= new BreakInst(_$[$0-1].first_line-1,_$[$0-1].first_column-1);
break;
case 145:
 this.$= new DefaultInst(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0]);
break;
case 147:
 this.$= new WhileInst(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-2],$$[$0]);
break;
case 148:
 this.$= new DoWhileInst(_$[$0-6].first_line-1,_$[$0-6].first_column-1,$$[$0-5],$$[$0-2]);
break;
case 149:
 this.$= new ContinueInst(_$[$0-1].first_line-1,_$[$0-1].first_column-1);
break;
case 150:
 this.$= new ForInst(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 151: case 152:
 this.$= new For2Inst(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-3],$$[$0-1],$$[$0]);
break;
case 157:
this.$= new Aumento(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]));
break;
case 158:
this.$= new Decremento(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]));
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,34:$V0,37:8,48:$V1,49:$V2,50:$V3,51:$V4,52:$V5,53:$V6},{1:[3]},{5:[1,16],6:17,7:4,8:5,9:6,10:7,34:$V0,37:8,48:$V1,49:$V2,50:$V3,51:$V4,52:$V5,53:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),o($V7,[2,7]),{34:[1,18],38:19,40:$V8},{35:$V9},o($Va,$Vb),o($Va,$Vc),o($Va,$Vd),o($Va,$Ve),o($Va,[2,53]),o($Va,[2,54]),{1:[2,1]},o($V7,[2,2]),o($Vf,$Vg,{32:[1,22]}),{16:[1,23],35:[1,24],39:[1,25]},{41:[1,26]},{15:51,24:58,25:59,29:27,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{33:[1,67],37:69,45:66,47:68,48:$V1,49:$V2,50:$V3,51:$V4,52:$V5,53:$V6},o($VE,[2,32]),{15:51,24:58,25:59,29:70,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{34:[1,71]},{34:[1,72]},{16:[1,73],30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{15:51,24:58,25:59,29:91,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{32:[1,92]},{32:[1,93]},{32:[1,94]},{32:[1,95]},{32:[1,96]},{15:51,24:58,25:59,29:97,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:98,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},o($VW,[2,82]),o($VW,[2,83]),o($VW,$VX,{102:100,103:103,32:$VY,40:$VZ,135:$V_,136:$V$}),o($VW,[2,85]),o($VW,[2,86]),o($VW,[2,87]),o($VW,[2,88]),o($VW,[2,89]),{32:[1,105]},o($VW,[2,91]),o($VW,[2,92]),o($VW,[2,93]),o($VW,[2,94]),o($VW,[2,95]),o($VW,[2,96]),o($VW,$V01),o($VW,[2,98]),o($VW,[2,99]),o($VW,[2,100]),o($VW,[2,101]),o($VW,[2,102]),o($VW,$V11),o($VW,$V21),o($VW,$V31),{30:$V41},{30:$V51},{30:$V61},{32:[1,109]},{32:$V71},{32:[1,111]},{33:[1,112],39:[1,113]},{46:114,54:$V81},o($V91,[2,47]),{34:[1,116]},{16:[1,117],30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},o($Vf,[2,34]),{35:[1,118]},o($VE,[2,30]),{15:51,24:58,25:59,29:119,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:120,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:121,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:122,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:123,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:124,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:125,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:126,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:127,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:128,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:129,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:130,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:131,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:132,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:133,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:134,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{101:$Va1,111:$Vb1,112:$Vc1,113:$Vd1,114:$Ve1,115:$Vf1},{30:$VF,33:[1,141],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{15:51,24:58,25:59,29:142,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:143,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:144,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:145,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:146,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},o($Vg1,[2,69],{30:$VF}),o($Vg1,[2,78],{30:$VF}),{15:51,24:58,25:59,29:149,32:$Vh,33:[1,147],34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,57:148,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},o([16,30,33,35,39,41,54,59,60,61,62,63,69,70,71,72,73,74,75,76,78,79,80,81],[2,107],{103:150,40:[1,151]}),o($VW,[2,157]),o($VW,[2,158]),o($Vh1,[2,109]),{15:51,24:58,25:59,29:153,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,104:152,106:[1,154],109:$VC,110:$VD},{15:51,24:58,25:59,29:155,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{108:[1,156]},{108:[1,157]},{108:[1,158]},{15:51,24:58,25:59,29:159,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:160,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:161,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{46:162,54:$V81},{37:69,47:163,48:$V1,49:$V2,50:$V3,51:$V4,52:$V5,53:$V6},o($V7,[2,45]),{2:$Vi1,8:170,9:171,10:181,11:164,12:165,13:166,14:167,15:168,17:169,18:172,19:173,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:182,28:183,29:198,32:$Vh,34:$Vj1,36:188,37:189,44:$Vk1,48:$Vl1,49:$Vm1,50:$Vn1,51:$Vo1,52:$V5,53:$V6,56:$Vp1,58:$Vq1,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD,116:$Vr1,121:$Vs1,126:$Vt1,128:$Vu1,129:$Vv1,130:$Vw1,131:$Vx1},o($V91,[2,48]),o($VE,[2,33]),{40:$Vy1,42:203},o($Vz1,[2,59],{30:$VF,61:$VI,62:$VJ,63:$VK,79:$VU}),o($Vz1,[2,60],{30:$VF,61:$VI,62:$VJ,63:$VK,79:$VU}),o($VA1,[2,61],{30:$VF,79:$VU}),o($VA1,[2,62],{30:$VF,79:$VU}),o($VA1,[2,63],{30:$VF,79:$VU}),o($VB1,[2,70],{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,78:$VT,79:$VU}),o($VB1,[2,71],{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,78:$VT,79:$VU}),o($VB1,[2,72],{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,78:$VT,79:$VU}),o($VB1,[2,73],{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,78:$VT,79:$VU}),o($VB1,[2,74],{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,78:$VT,79:$VU}),o($VB1,[2,75],{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,78:$VT,79:$VU}),o($VC1,[2,76],{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,78:$VT,79:$VU}),o($VC1,[2,77],{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,78:$VT,79:$VU}),o($Vz1,[2,79],{30:$VF,61:$VI,62:$VJ,63:$VK,79:$VU}),o($Vg1,[2,80],{30:$VF}),{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV,81:[1,205]},{32:[1,206]},{32:[1,207]},{32:[1,208]},{32:[1,209]},{32:[1,210]},{32:[1,211]},o($VW,[2,58]),{30:$VF,39:[1,212],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{30:$VF,33:[1,213],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{30:$VF,33:[1,214],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{30:$VF,33:[1,215],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{30:$VF,33:[1,216],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},o($VW,[2,116]),{33:[1,217],39:$VD1},o($V91,[2,119],{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV}),o($Vh1,[2,108]),{15:51,24:58,25:59,29:219,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{81:[1,220]},{30:$VF,41:$VE1,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV,81:[2,112]},{81:[2,113]},{30:$VF,33:[1,222],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{32:[1,223]},{32:[1,224]},{32:[1,225]},{30:$VF,33:[1,226],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{30:$VF,33:[1,227],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{30:$VF,33:[1,228],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},o($V7,[2,44]),o($V91,[2,46]),{2:$Vi1,8:170,9:171,10:181,12:230,13:166,14:167,15:168,17:169,18:172,19:173,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:182,28:183,29:198,32:$Vh,34:$Vj1,36:188,37:189,44:$Vk1,48:$Vl1,49:$Vm1,50:$Vn1,51:$Vo1,52:$V5,53:$V6,55:[1,229],56:$Vp1,58:$Vq1,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD,116:$Vr1,121:$Vs1,126:$Vt1,128:$Vu1,129:$Vv1,130:$Vw1,131:$Vx1},o($VF1,[2,9]),o($VF1,[2,10]),o($VF1,[2,11]),o($VG1,$V01,{16:[1,231]}),o($VF1,[2,13]),o($VF1,[2,14]),o($VF1,[2,15]),o($VF1,[2,16]),o($VF1,[2,17]),o($VF1,[2,18]),o($VF1,[2,19]),o($VF1,[2,20]),o($VF1,[2,21]),o($VG1,$V21,{16:[1,232]}),o($VG1,$V31,{16:[1,233]}),o($VF1,[2,24]),o($VF1,[2,25]),o($VF1,[2,26]),o($VF1,[2,27]),o($VF1,[2,28]),{32:[1,234]},{32:[1,235]},o($VG1,$VX,{102:100,103:103,32:$VY,35:$V9,40:$VZ,135:$V_,136:$V$}),o($VG1,$V11,{35:[1,236]}),{34:$VH1,38:19,40:$V8},{15:51,16:[1,239],24:58,25:59,29:238,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{32:[1,240]},{32:[1,241]},{16:[1,242]},{32:[1,243]},{46:244,54:$V81},{16:[1,245]},{32:[1,246],34:[1,247]},{30:[1,248],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},o($Va,$Vb,{30:$V61}),o($Va,$Vc,{30:$V51}),o($Va,$Vd,{30:$V41}),o($Va,$Ve,{32:$V71}),{16:[1,249]},{15:51,24:58,25:59,29:251,32:$Vh,34:$Vi,36:57,40:$Vy1,42:252,43:250,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:253,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{33:[1,254]},{33:[1,255]},{33:[1,256]},{33:[1,257]},{15:51,24:58,25:59,29:258,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:259,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:260,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},o($VW,[2,65]),o($VW,[2,66]),o($VW,[2,67]),o($VW,[2,68]),o($VW,[2,117]),{15:51,24:58,25:59,29:261,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{30:$VF,41:$VE1,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{15:51,24:58,25:59,29:263,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,105:262,107:[1,264],109:$VC,110:$VD},o($Vh1,[2,111]),o($VW,[2,90]),{15:51,24:58,25:59,29:265,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:266,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:267,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},o($VW,[2,123]),o($VW,[2,125]),o($VW,[2,124]),o([2,5,32,34,44,48,49,50,51,52,53,55,56,58,60,64,65,66,67,68,77,82,83,84,85,86,87,88,89,109,110,116,120,121,125,126,127,128,129,130,131],[2,55]),o($VF1,[2,8]),o($VF1,[2,12]),o($VF1,[2,22]),o($VF1,[2,23]),{15:51,24:58,25:59,29:149,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,57:268,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:149,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,57:269,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:270,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},o($Vf,$Vg),{16:[1,271],30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},o($VF1,[2,43]),{15:51,24:58,25:59,29:272,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:273,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},o($VF1,[2,144]),{15:51,24:58,25:59,29:274,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{128:[1,275]},o($VF1,[2,149]),{8:277,9:278,34:$V0,37:279,48:$V1,49:$V2,50:$V3,51:$V4,52:$V5,53:$V6,132:276},{133:[1,280]},{31:[1,281],101:$Va1,111:$Vb1,112:$Vc1,113:$Vd1,114:$Ve1,115:$Vf1},o($VE,[2,36]),{39:[1,283],41:[1,282]},o($VI1,[2,40],{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV}),o($VI1,[2,41]),o([16,33,39,41,54,80,81],[2,81],{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU}),o($VW,[2,106]),o($VW,[2,126]),o($VW,[2,127]),o($VW,[2,128]),{30:$VF,39:[1,284],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{30:$VF,33:[1,285],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{30:$VF,33:[1,286],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},o($V91,[2,118],{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV}),{41:[1,287]},{30:$VF,41:[2,114],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{41:[2,115]},{30:$VF,33:[1,288],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{30:$VF,33:[1,289],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{30:$VF,33:[1,290],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{33:[1,291],39:$VD1},{33:[1,292],39:$VD1},{16:[1,293],30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},o($VF1,[2,42]),{30:$VF,33:[1,294],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{30:$VF,33:[1,295],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{30:$VF,33:[1,296],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{32:[1,297]},{15:51,24:58,25:59,29:298,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},o($VJ1,[2,153]),o($VJ1,[2,154]),{34:$VH1,38:19},{15:51,24:58,25:59,29:300,32:$Vh,34:$Vi,36:57,40:$Vy1,42:299,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{32:[1,301]},o([16,39,41,54],[2,37]),{15:51,24:58,25:59,29:302,32:$Vh,34:$Vi,36:57,40:$Vy1,42:303,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{15:51,24:58,25:59,29:304,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},o($VW,[2,130]),o($VW,[2,64]),o($Vh1,[2,110]),o($VW,[2,120]),o($VW,[2,121]),o($VW,[2,122]),{16:[1,305]},{16:[1,306]},o($VF1,[2,31]),{2:$Vi1,8:170,9:171,10:181,12:308,13:166,14:167,15:168,17:169,18:172,19:173,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:182,28:183,29:198,32:$Vh,34:$Vj1,36:188,37:189,44:$Vk1,46:307,48:$Vl1,49:$Vm1,50:$Vn1,51:$Vo1,52:$V5,53:$V6,54:$V81,56:$Vp1,58:$Vq1,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD,116:$Vr1,121:$Vs1,126:$Vt1,128:$Vu1,129:$Vv1,130:$Vw1,131:$Vx1},{54:[1,309]},{46:310,54:$V81},{15:51,24:58,25:59,29:311,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{16:[1,312],30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{46:313,54:$V81},{30:$VF,46:314,54:$V81,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{15:51,24:58,25:59,29:315,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},o($VI1,[2,38],{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV}),o($VI1,[2,39]),{30:$VF,33:[1,316],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},o($VF1,[2,56]),o($VF1,[2,57]),o($VF1,[2,131],{117:317,118:318,119:319,120:$VK1}),o($VF1,[2,132]),{122:321,124:322,125:$VL1},o($VF1,[2,147]),{30:$VF,33:[1,324],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{15:51,24:58,25:59,29:325,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},o($VF1,[2,151]),o($VF1,[2,152]),{30:$VF,33:[1,326],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},o($VW,[2,129]),o($VF1,[2,133]),o($VF1,[2,136],{118:318,119:319,117:327,120:$VK1}),o($VF1,[2,137],{118:318,119:319,117:328,120:$VK1}),{46:330,54:$V81,116:[1,329]},{55:[2,146],123:331,124:332,125:$VL1,127:[1,333]},o($VM1,[2,142]),{15:51,24:58,25:59,29:334,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},{16:[1,335]},{30:$VF,33:[1,336],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{16:[1,337]},o($VF1,[2,134]),o($VF1,[2,135]),{32:[1,338]},o($VN1,[2,138]),{55:[1,339]},o($VM1,[2,141]),{81:[1,340]},{30:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV,81:[1,341]},o($VF1,[2,148]),{46:342,54:$V81},o($VF1,[2,29]),{15:51,24:58,25:59,29:343,32:$Vh,34:$Vi,36:57,48:$Vj,49:$Vk,50:$Vl,51:$Vm,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD},o($VF1,[2,140]),{2:$Vi1,8:170,9:171,10:181,11:344,12:165,13:166,14:167,15:168,17:169,18:172,19:173,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:182,28:183,29:198,32:$Vh,34:$Vj1,36:188,37:189,44:$Vk1,48:$Vl1,49:$Vm1,50:$Vn1,51:$Vo1,52:$V5,53:$V6,56:$Vp1,58:$Vq1,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD,116:$Vr1,121:$Vs1,126:$Vt1,128:$Vu1,129:$Vv1,130:$Vw1,131:$Vx1},{2:$Vi1,8:170,9:171,10:181,11:345,12:165,13:166,14:167,15:168,17:169,18:172,19:173,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:182,28:183,29:198,32:$Vh,34:$Vj1,36:188,37:189,44:$Vk1,48:$Vl1,49:$Vm1,50:$Vn1,51:$Vo1,52:$V5,53:$V6,56:$Vp1,58:$Vq1,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD,116:$Vr1,121:$Vs1,126:$Vt1,128:$Vu1,129:$Vv1,130:$Vw1,131:$Vx1},o($VF1,[2,150]),{30:$VF,33:[1,346],59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,78:$VT,79:$VU,80:$VV},{2:$Vi1,8:170,9:171,10:181,12:230,13:166,14:167,15:168,17:169,18:172,19:173,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:182,28:183,29:198,32:$Vh,34:$Vj1,36:188,37:189,44:$Vk1,48:$Vl1,49:$Vm1,50:$Vn1,51:$Vo1,52:$V5,53:$V6,55:[2,145],56:$Vp1,58:$Vq1,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,109:$VC,110:$VD,116:$Vr1,121:$Vs1,126:$Vt1,128:$Vu1,129:$Vv1,130:$Vw1,131:$Vx1},o($VM1,[2,143],{90:45,91:46,92:47,93:48,94:49,95:50,96:52,97:53,98:54,99:55,100:56,13:166,14:167,15:168,17:169,8:170,9:171,18:172,19:173,20:174,21:175,22:176,23:177,24:178,25:179,26:180,10:181,27:182,28:183,36:188,37:189,29:198,12:230,2:$Vi1,32:$Vh,34:$Vj1,44:$Vk1,48:$Vl1,49:$Vm1,50:$Vn1,51:$Vo1,52:$V5,53:$V6,56:$Vp1,58:$Vq1,60:$Vn,64:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,77:$Vt,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,109:$VC,110:$VD,116:$Vr1,121:$Vs1,126:$Vt1,128:$Vu1,129:$Vv1,130:$Vw1,131:$Vx1}),{46:347,54:$V81},o($VN1,[2,139])],
defaultActions: {16:[2,1],154:[2,113],264:[2,115]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var debugMode = false;
	function debugPrint(valor)
	{
		if(debugMode)
		{
			debugPrint(valor);
		}
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitve":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:return;
break;
case 4:return;
break;
case 5:return;
break;
case 6:return;
break;
case 7:return 83
break;
case 8:return 82
break;
case 9:return 84	  
break;
case 10:return 85
break;
case 11: debugPrint('>=');return 69; 
break;
case 12: debugPrint('<=');return 70; 
break;
case 13: debugPrint('==');return 72; 
break;
case 14: debugPrint('!=');return 71; 
break;
case 15: debugPrint('>');return 73; 
break;
case 16: debugPrint('<');return 74; 
break;
case 17: debugPrint('||');return 75; 
break;
case 18: debugPrint('?');return 80; 
break;
case 19: debugPrint('&&');return 76; 
break;
case 20: debugPrint('&');return 78; 
break;
case 21: debugPrint('!');return 77; 
break;
case 22: debugPrint('*');return 61; 
break;
case 23: debugPrint('/');return 62; 
break;
case 24: debugPrint('++');return 135; 
break;
case 25: debugPrint('--');return 136; 
break;
case 26: debugPrint('-');return 60; 
break;
case 27: debugPrint('+');return 59; 
break;
case 28: debugPrint('%');return 63; 
break;
case 29: debugPrint('^');return 79; 
break;
case 30: debugPrint('=');return 35; 
break;
case 31: debugPrint('(');return 32; 
break;
case 32: debugPrint(')');return 33; 
break;
case 33: debugPrint('{');return 54; 
break;
case 34: debugPrint('}');return 55; 
break;
case 35: debugPrint('[');return 40; 
break;
case 36: debugPrint(']');return 41; 
break;
case 37: debugPrint(',');return 39; 
break;
case 38: debugPrint('.');return 30; 
break;
case 39: debugPrint(':');return 81; 
break;
case 40: debugPrint(';');return 16; 
break;
case 41: debugPrint(yy_.yytext);return 86; 
break;
case 42: debugPrint(yy_.yytext);return 87; 
break;
case 43: debugPrint(yy_.yytext);return 88; 
break;
case 44: debugPrint(yy_.yytext);return 56; 
break;
case 45: debugPrint(yy_.yytext);return 58; 
break;
case 46: debugPrint(yy_.yytext);return 89; 
break;
case 47: debugPrint(yy_.yytext);return 'tnull'; 
break;
case 48: debugPrint(yy_.yytext);return 48; 
break;
case 49: debugPrint(yy_.yytext);return 49; 
break;
case 50: debugPrint(yy_.yytext);return 50; 
break;
case 51: debugPrint(yy_.yytext);return 52; 
break;
case 52: debugPrint(yy_.yytext);return 51; 
break;
case 53: debugPrint(yy_.yytext);return 53; 
break;
case 54: debugPrint(yy_.yytext);return 44; 
break;
case 55: debugPrint(yy_.yytext);return 64; 
break;
case 56: debugPrint(yy_.yytext);return 65; 
break;
case 57: debugPrint(yy_.yytext);return 66; 
break;
case 58: debugPrint(yy_.yytext);return 67; 
break;
case 59: debugPrint(yy_.yytext);return 68; 
break;
case 60: debugPrint(yy_.yytext);return 115; 
break;
case 61: debugPrint(yy_.yytext);return 114; 
break;
case 62: debugPrint(yy_.yytext);return 113; 
break;
case 63: debugPrint(yy_.yytext);return 112; 
break;
case 64: debugPrint(yy_.yytext);return 111; 
break;
case 65: debugPrint(yy_.yytext);return 'ToString'; 
break;
case 66: debugPrint(yy_.yytext);return 109; 
break;
case 67: debugPrint(yy_.yytext);return 110; 
break;
case 68: debugPrint(yy_.yytext);return 108; 
break;
case 69: debugPrint(yy_.yytext);return 101; 
break;
case 70: debugPrint(yy_.yytext);return 31; 
break;
case 71: debugPrint(yy_.yytext);return 121; 
break;
case 72: debugPrint(yy_.yytext);return 125; 
break;
case 73: debugPrint(yy_.yytext);return 126; 
break;
case 74: debugPrint(yy_.yytext);return 127; 
break;
case 75: debugPrint(yy_.yytext);return 128; 
break;
case 76: debugPrint(yy_.yytext);return 129; 
break;
case 77: debugPrint(yy_.yytext);return 116; 
break;
case 78: debugPrint(yy_.yytext);return 120; 
break;
case 79: debugPrint(yy_.yytext);return 131; 
break;
case 80: debugPrint(yy_.yytext);return 133; 
break;
case 81: debugPrint(yy_.yytext);return 130; 
break;
case 82: debugPrint(yy_.yytext);return 106; 
break;
case 83: debugPrint(yy_.yytext);return 107; 
break;
case 84: debugPrint(yy_.yytext); return 34; 
break;
case 85:return 5
break;
case 86:  Utils.registrarErrorLexico(yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext, 'Caracter no válido.'); return 'INVALIDO' 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:\/\*[^'*']*\*\/)/,/^(?:\/\/[^\r\n]*[^\r\n])/,/^(?:\/\*[^"*"]\*\/)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:"(\\.|[^"])*")/,/^(?:'(\\.|[^'])')/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\^)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:typeof\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:toString\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:parse\b)/,/^(?:pop\b)/,/^(?:push\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:continue\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:([a-zA-Z]|_|\$)([a-zA-Z]|[0-9]|_|\$)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}