/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[5,27,43,44,45,46,47,48],$V8=[2,49],$V9=[1,19],$Va=[27,33],$Vb=[15,28,32],$Vc=[2,30],$Vd=[1,35],$Ve=[1,25],$Vf=[1,58],$Vg=[1,57],$Vh=[1,56],$Vi=[1,60],$Vj=[1,31],$Vk=[1,26],$Vl=[1,27],$Vm=[1,28],$Vn=[1,29],$Vo=[1,30],$Vp=[1,32],$Vq=[1,33],$Vr=[1,34],$Vs=[1,36],$Vt=[1,37],$Vu=[1,38],$Vv=[1,39],$Vw=[1,40],$Vx=[1,41],$Vy=[1,59],$Vz=[1,61],$VA=[1,66],$VB=[2,5,27,37,38,43,44,45,46,47,48,50,51,53,55,59,60,61,62,63,72,77,78,79,80,81,82,83,84,101,102,108,113,117,118,119,120,121,122,123],$VC=[1,70],$VD=[1,71],$VE=[1,72],$VF=[1,73],$VG=[1,74],$VH=[1,75],$VI=[1,76],$VJ=[1,77],$VK=[1,78],$VL=[1,79],$VM=[1,80],$VN=[1,81],$VO=[1,82],$VP=[1,83],$VQ=[1,84],$VR=[1,85],$VS=[1,86],$VT=[15,32,34,40,49,54,55,56,57,58,64,65,66,67,68,69,70,71,73,74,75,76,99],$VU=[2,80],$VV=[1,95],$VW=[1,97],$VX=[1,96],$VY=[1,108],$VZ=[32,40],$V_=[15,32,34,40,49,54,55,56,57,58,64,65,66,67,68,69,70,71,73,74,75,76],$V$=[1,168],$V01=[1,171],$V11=[1,173],$V21=[1,169],$V31=[1,170],$V41=[1,174],$V51=[1,175],$V61=[1,176],$V71=[1,177],$V81=[1,178],$V91=[1,179],$Va1=[1,180],$Vb1=[15,32,34,40,49,54,55,64,65,66,67,68,69,70,71,73,75,76],$Vc1=[15,32,34,40,49,54,55,56,57,58,64,65,66,67,68,69,70,71,73,75,76],$Vd1=[15,32,34,40,49,64,65,66,67,68,69,70,71,75,76],$Ve1=[15,32,34,40,49,70,71,75,76],$Vf1=[1,193],$Vg1=[2,27,37,43,44,45,46,47,48,50,51,53,108,113,117,118,119,120,121,122,123],$Vh1=[1,209],$Vi1=[27,38,43,44,45,46,55,59,60,61,62,63,72,77,78,79,80,81,82,83,84,101,102],$Vj1=[1,261],$Vk1=[1,283],$Vl1=[1,286],$Vm1=[32,34],$Vn1=[50,117,119],$Vo1=[2,27,37,43,44,45,46,47,48,50,51,53,108,112,113,117,118,119,120,121,122,123];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONESG":4,"EOF":5,"INSTRUCCIONG":6,"FUNCION":7,"ASIGNACION":8,"DECLARACION":9,"INSTRUCCIONES":10,"INSTRUCCION":11,"PRINTLN":12,"PRINT":13,"LLAMADA":14,";":15,"RETORNO":16,"IFINST":17,"SWITCHINST":18,"BREAKINST":19,"WHILEINST":20,"DOWHILEINST":21,"AUMENTO":22,"DECREMENTO":23,"CONTINUEINST":24,"DECLARACCIONARREGLO":25,"FORINST":26,"id":27,"=":28,"E":29,"TIPO":30,"LID":31,",":32,"[":33,"]":34,"EXPARREGLO":35,"LExprArreglo":36,"retorno":37,"(":38,"LPARAMETROS":39,")":40,"BLOQUE":41,"PARAMETRO":42,"tint":43,"tdouble":44,"tboolean":45,"tstring":46,"tchar":47,"tvoid":48,"{":49,"}":50,"println":51,"LExpr":52,"print":53,"+":54,"-":55,"*":56,"/":57,"%":58,"pow":59,"sqrt":60,"sin":61,"cos":62,"tan":63,">=":64,"<=":65,"!=":66,"==":67,">":68,"<":69,"||":70,"&&":71,"!":72,"&":73,"^":74,"?":75,":":76,"entero":77,"double":78,"texto":79,"caracter":80,"nulo":81,"verdadero":82,"falso":83,"tipode":84,"PARSEBOOL":85,"PARSEDOUBLE":86,"PARSEINT":87,"NATIVATOINT":88,"NATIVATOSTRING":89,"NATIVATODOUBLE":90,"LOWERCADENA":91,"UPPERCADENA":92,"LENGTHCADENA":93,"PORCIONCADENA":94,"POSICIONCADENA":95,"ACCESOARREGLO":96,"LINDICES":97,"INDICE":98,".":99,"parse":100,"ToInt":101,"ToDouble":102,"caracterlower":103,"caracterupper":104,"caracterlength":105,"caracterporcion":106,"caracterposicion":107,"Rif":108,"ELSEIFINSTSS":109,"ELSEIFINST":110,"ELSEFINAL":111,"Relse":112,"Rswitch":113,"LISTACASE":114,"DEFAULTINST":115,"CASE":116,"Rcase":117,"Rbreak":118,"Rdefault":119,"Rwhile":120,"Rdo":121,"Rcontinue":122,"Rfor":123,"FOROPCIONES":124,"Rin":125,"ACTUALIZACION":126,"++":127,"--":128,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:";",27:"id",28:"=",32:",",33:"[",34:"]",37:"retorno",38:"(",40:")",43:"tint",44:"tdouble",45:"tboolean",46:"tstring",47:"tchar",48:"tvoid",49:"{",50:"}",51:"println",53:"print",54:"+",55:"-",56:"*",57:"/",58:"%",59:"pow",60:"sqrt",61:"sin",62:"cos",63:"tan",64:">=",65:"<=",66:"!=",67:"==",68:">",69:"<",70:"||",71:"&&",72:"!",73:"&",74:"^",75:"?",76:":",77:"entero",78:"double",79:"texto",80:"caracter",81:"nulo",82:"verdadero",83:"falso",84:"tipode",99:".",100:"parse",101:"ToInt",102:"ToDouble",103:"caracterlower",104:"caracterupper",105:"caracterlength",106:"caracterporcion",107:"caracterposicion",108:"Rif",112:"Relse",113:"Rswitch",117:"Rcase",118:"Rbreak",119:"Rdefault",120:"Rwhile",121:"Rdo",122:"Rcontinue",123:"Rfor",125:"Rin",127:"++",128:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[10,2],[10,1],[11,1],[11,1],[11,2],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,2],[11,2],[11,1],[11,1],[11,1],[11,1],[8,4],[9,3],[9,5],[31,3],[31,1],[25,7],[35,3],[36,3],[36,3],[36,1],[36,1],[16,3],[16,2],[7,6],[7,5],[39,3],[39,1],[42,2],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[41,3],[12,5],[13,5],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,6],[29,4],[29,4],[29,4],[29,4],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,3],[29,3],[29,5],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,4],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[96,2],[97,2],[97,1],[98,3],[14,3],[14,4],[52,3],[52,1],[85,6],[86,6],[87,6],[88,4],[90,4],[89,4],[91,5],[92,5],[93,5],[94,8],[95,6],[17,5],[17,5],[17,6],[109,2],[109,2],[109,1],[109,1],[111,2],[110,6],[18,8],[114,2],[114,1],[116,4],[19,2],[115,3],[115,0],[20,5],[21,7],[24,2],[26,8],[26,5],[26,5],[26,10],[124,1],[124,1],[126,1],[126,1],[22,2],[23,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
		
	return new Raiz($$[$0-1].linea, $$[$0-1].columna, $$[$0-1]); 

break;
case 2: case 7:
 
				  	this.$ = $$[$0-1]; 
					this.$.registrarInstruccion($$[$0]);
				
break;
case 3:
 
					this.$ = new Bloque(_$[$0].first_line-1,_$[$0].first_column-1); 
					if($$[$0]!=null){this.$.registrarInstruccion($$[$0]);} // Si es nulo, viene de un error manejado en otras producciones.
				
break;
case 4: case 9: case 10:
 this.$ = $$[$0];
break;
case 5: case 6: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 23:
this.$ = $$[$0];
break;
case 8:
 
							this.$ = new Bloque(_$[$0].first_line-1,_$[$0].first_column-1); 
							if($$[$0]!=null){this.$.registrarInstruccion($$[$0]);} // Si es nulo, viene de un error manejado en otras producciones.
						  
break;
case 11: case 20: case 21:
this.$ =$$[$0-1];
break;
case 22: case 99:
this.$ =$$[$0];
break;
case 24: case 100: case 103: case 143: case 144: case 145: case 146:
this.$=$$[$0];
break;
case 25:
 	
						Utils.registrarErrorSintactico(_$[$0].first_line-1,_$[$0].first_column-1, $$[$0], $$[$0]);
						this.$ = null;						
					
break;
case 26:
 this.$ = new Asignacion(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-3],$$[$0-1]); 
break;
case 27:
 this.$ = new Declaracion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0-1],null);
break;
case 28:
 this.$ = new Declaracion(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4],$$[$0-3],$$[$0-1]);
break;
case 29:
this.$  =$$[$0-2]; this.$.push($$[$0]);
break;
case 30:
 this.$ = new Array; this.$.push($$[$0]); 
break;
case 31:
this.$ = new DeclaracionArreglo(_$[$0-6].first_line-1,_$[$0-6].first_column-1,$$[$0-6],$$[$0-3],$$[$0-1]);
break;
case 32:
 this.$ =$$[$0-1];
break;
case 33: case 34: case 107:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 35: case 36: case 108:
this.$= new Array; this.$.push($$[$0]);
break;
case 37:
 this.$= new Retorno(_$[$0-2].first_line-1,_$[$0-2].first_column-1, $$[$0-1]);
break;
case 38:
 this.$= new Retorno(_$[$0-1].first_line-1,_$[$0-1].first_column-1, null);
break;
case 39:
 this.$ = new Funcion(_$[$0-5].first_line-1,_$[$0-5].first_column-1, $$[$0-5], $$[$0-4], $$[$0-2],$$[$0]);
break;
case 40:
 this.$ = new Funcion(_$[$0-4].first_line-1,_$[$0-4].first_column-1, $$[$0-4], $$[$0-3], new Array,$$[$0]);
break;
case 41:
this.$ =$$[$0-2]; this.$.push($$[$0]);
break;
case 42: case 131:
this.$ = new Array; this.$.push($$[$0]);
break;
case 43:
 this.$ = new Parametro(_$[$0-1].first_line-1,_$[$0-1].first_column-1, $$[$0-1], $$[$0]);
break;
case 44:
 this.$ = new Tipo(TipoPrimitivo.INT);
break;
case 45:
 this.$ = new Tipo(TipoPrimitivo.DOUBLE);
break;
case 46:
 this.$ = new Tipo(TipoPrimitivo.BOOL);
break;
case 47:
 this.$ = new Tipo(TipoPrimitivo.STRING);
break;
case 48:
 this.$ = new Tipo(TipoPrimitivo.CHAR);
break;
case 49:
this.$ = new Tipo(TipoPrimitivo.STRUCT, $$[$0]);
break;
case 50:
 this.$ = new Tipo(TipoPrimitivo.VOID);
break;
case 51:
this.$ = $$[$0-1]; 
break;
case 52:
				
			var nodo_concatenar = null;
			if($$[$0-2].length== 1)
			{
				nodo_concatenar = $$[$0-2][0];
			}				
			else
			{
				var nodoTmp = $$[$0-2][0]; // primer expresion
				var i = 1;
				for( i=1; i<$$[$0-2].length; i++)
				{
					var nodo = $$[$0-2][i];
					var nodoTmp = new Concatenar(nodoTmp.linea, nodoTmp.columna, nodoTmp, nodo);					
				}											
				nodo_concatenar = nodoTmp;
			}		
			this.$ = new Println(_$[$0-4].first_line-1,_$[$0-4].first_column-1, nodo_concatenar);						
		
break;
case 53:

			var nodo_concatenar = null;
			if($$[$0-2].length== 1)
			{
				nodo_concatenar = $$[$0-2][0];
			}				
			else
			{
				var nodoTmp = $$[$0-2][0]; // primer expresion
				var i = 1;
				for( i=1; i<$$[$0-2].length; i++)
				{
					var nodo = $$[$0-2][i];
					var nodoTmp = new Concatenar(nodoTmp.linea, nodoTmp.columna, nodoTmp, nodo);					
				}											
				nodo_concatenar = nodoTmp;
			}		
			this.$ = new Print(_$[$0-4].first_line-1,_$[$0-4].first_column-1, nodo_concatenar);			
		
break;
case 54:

		this.$ = $$[$0-1];		
	
break;
case 55:

		this.$ = new Suma(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);	
	
break;
case 56:

		this.$ = new Resta(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 57:

		this.$ = new Multiplicacion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 58:

		this.$ = new Division(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 59:

		this.$ = new Modulo(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 60:

		this.$ = new Potencia(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-3], $$[$0-1]);
	
break;
case 61:

		this.$ = new RaizCuadrada(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 62:

		this.$ = new Seno(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 63:

		this.$ = new Coseno(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 64:

		this.$ = new Tangente(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 65:

		this.$ = new Menos(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0]);
	
break;
case 66:

		this.$ = new MayorIgual(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 67:

		this.$ = new MenorIgual(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 68:

		this.$ = new Diferenciacion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 69:

		this.$ = new Igualdad(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 70:

		this.$ = new MayorQue(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 71:

		this.$ = new MenorQue(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 72:

		this.$ = new OrLog(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 73:

		this.$ = new AndLog(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 74:

		this.$ = new NotLog(_$[$0].first_line,_$[$0].first_column,$$[$0]);
	
break;
case 75:

		this.$ = new Concatenar(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 76:

		this.$ = new PotenciaString(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 77:

		this.$ = new Ternario(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4],$$[$0-2], $$[$0]);
	
break;
case 78:

		this.$ = new Entero(_$[$0].first_line-1,_$[$0].first_column-1, parseInt($$[$0]));
	
break;
case 79:

		this.$ = new Double(_$[$0].first_line-1,_$[$0].first_column-1, parseFloat($$[$0]));
	
break;
case 80:

		this.$ = new ExpVariable(_$[$0].first_line-1,_$[$0].first_column-1,$$[$0]);
	
break;
case 81:

		this.$ = new ExpString(_$[$0].first_line-1,_$[$0].first_column-1,$$[$0].substring(1,$$[$0].length-1));
		
	
break;
case 82:

		this.$ = new Caracter(_$[$0].first_line,_$[$0].first_column,$$[$0].substring(1,$$[$0].length-1));
	
break;
case 83:

		this.$ = new Nulo(_$[$0].first_line-1,_$[$0].first_column-1);
	
break;
case 84:

		this.$ = new ExpBooleana(_$[$0].first_line-1,_$[$0].first_column-1, true);
	
break;
case 85:

		this.$ = new ExpBooleana(_$[$0].first_line-1,_$[$0].first_column-1, false);
	
break;
case 86:

		this.$ = new TipoDe(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 125: case 126:
this.$= $$[$0];
break;
case 101:
this.$= new AccesoArreglo(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]),$$[$0]);
break;
case 102:
this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 104:
this.$ = new Array; this.$.push($$[$0-1]);
break;
case 105:
 this.$ = new Llamada(_$[$0-2].first_line-1,_$[$0-2].first_column-1, $$[$0-2], new Array);
break;
case 106:
 this.$ = new Llamada(_$[$0-3].first_line-1,_$[$0-3].first_column-1, $$[$0-3], $$[$0-1]);
break;
case 109:
 this.$ = new ParseBool(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 110:
 this.$ = new ParseDouble(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 111:
 this.$ = new ParseInt(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 112:
 this.$ = new NativaToInt(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 113:
 this.$ = new NativaToDouble(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 114:
 this.$ = new NativaToString(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 115:
 this.$ = new LowerCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 116:
 this.$ = new UpperCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 117:
 this.$ = new LengthCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 118:
 this.$ = new PorcionCadena(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-7],$$[$0-3],$$[$0-1]);
break;
case 119:
 this.$ = new PosicionCadena(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-5],$$[$0-1]);
break;
case 120:
this.$= new Si(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-2],$$[$0], null);
break;
case 121:
 
									var BloqueInstruccion = new Bloque(_$[$0-4].first_line-1,_$[$0-4].first_column-1); 
									BloqueInstruccion.registrarInstruccion($$[$0]);
									this.$= new Si(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-2],BloqueInstruccion, null);
								
break;
case 122:
 
									this.$= new Si(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-3],$$[$0-1], $$[$0]);
								
break;
case 123: case 124:
this.$= $$[$0-1];  this.$.sinosi = $$[$0];
break;
case 127:
this.$= new Si(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpBooleana(_$[$0-1].first_line-1,_$[$0-1].first_column-1,true),$$[$0],null); 
break;
case 128:
this.$= new Si(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-2],$$[$0], null);
break;
case 129:
 this.$= new SwitchInst(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-5],$$[$0-2],$$[$0-1]);
break;
case 130:
this.$ =$$[$0-1]; this.$.push($$[$0]);
break;
case 132:
 this.$= new CaseInst(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-2],$$[$0]);
break;
case 133:
 this.$= new BreakInst(_$[$0-1].first_line-1,_$[$0-1].first_column-1);
break;
case 134:
 this.$= new DefaultInst(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0]);
break;
case 136:
 this.$= new WhileInst(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-2],$$[$0]);
break;
case 137:
 this.$= new DoWhileInst(_$[$0-6].first_line-1,_$[$0-6].first_column-1,$$[$0-5],$$[$0-2]);
break;
case 138:
 this.$= new ContinueInst(_$[$0-1].first_line-1,_$[$0-1].first_column-1);
break;
case 139:
 this.$= new ForInst(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 140: case 141:
 this.$= new For2Inst(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-3],$$[$0-1],$$[$0]);
break;
case 142:
 this.$= new For3Inst(_$[$0-9].first_line-1,_$[$0-9].first_column-1,$$[$0-8], new ExpVariable(_$[$0-9].first_line-1,_$[$0-9].first_column-1,$$[$0-6]), new Limites(_$[$0-9].first_line-1,_$[$0-9].first_column-1,$$[$0-4],$$[$0-2]),$$[$0]);
break;
case 147:
this.$= new Aumento(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]));
break;
case 148:
this.$= new Decremento(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]));
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,27:$V0,30:7,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6},{1:[3]},{5:[1,15],6:16,7:4,8:5,9:6,27:$V0,30:7,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),{27:[1,17],31:18},{27:$V8,28:$V9},o($Va,[2,44]),o($Va,[2,45]),o($Va,[2,46]),o($Va,[2,47]),o($Va,[2,48]),o($Va,[2,50]),{1:[2,1]},o($V7,[2,2]),o($Vb,$Vc,{38:[1,20]}),{15:[1,21],28:[1,22],32:[1,23]},{14:48,22:55,23:54,27:$Vd,29:24,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{27:$VA,30:65,39:62,40:[1,63],42:64,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6},o($VB,[2,27]),{14:48,22:55,23:54,27:$Vd,29:67,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{27:[1,68]},{15:[1,69],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{14:48,22:55,23:54,27:$Vd,29:87,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{38:[1,88]},{38:[1,89]},{38:[1,90]},{38:[1,91]},{38:[1,92]},{14:48,22:55,23:54,27:$Vd,29:93,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:94,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},o($VT,[2,78]),o($VT,[2,79]),o($VT,$VU,{38:$VV,127:$VW,128:$VX}),o($VT,[2,81]),o($VT,[2,82]),o($VT,[2,83]),o($VT,[2,84]),o($VT,[2,85]),{38:[1,98]},o($VT,[2,87]),o($VT,[2,88]),o($VT,[2,89]),o($VT,[2,90]),o($VT,[2,91]),o($VT,[2,92]),o($VT,[2,93]),o($VT,[2,94]),o($VT,[2,95]),o($VT,[2,96]),o($VT,[2,97]),o($VT,[2,98]),o($VT,[2,99]),o($VT,[2,100]),{99:[1,99]},{99:[1,100]},{99:[1,101]},{38:[1,102]},{38:[1,103]},{38:[1,104]},{32:[1,106],40:[1,105]},{41:107,49:$VY},o($VZ,[2,42]),{27:[1,109]},{27:$V8},{15:[1,110],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},o($Vb,[2,29]),o($VB,[2,26]),{14:48,22:55,23:54,27:$Vd,29:111,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:112,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:113,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:114,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:115,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:116,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:117,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:118,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:119,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:120,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:121,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:122,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:123,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:124,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:125,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:126,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{103:[1,127],104:[1,128],105:[1,129],106:[1,130],107:[1,131]},{40:[1,132],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{14:48,22:55,23:54,27:$Vd,29:133,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:134,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:135,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:136,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:137,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},o($V_,[2,65],{99:$VS}),o($V_,[2,74],{99:$VS}),{14:48,22:55,23:54,27:$Vd,29:140,38:$Ve,40:[1,138],43:$Vf,44:$Vg,45:$Vh,46:$Vi,52:139,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},o($VT,[2,148]),o($VT,[2,147]),{14:48,22:55,23:54,27:$Vd,29:141,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{100:[1,142]},{100:[1,143]},{100:[1,144]},{14:48,22:55,23:54,27:$Vd,29:145,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:146,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:147,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{41:148,49:$VY},{27:$VA,30:65,42:149,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6},o($V7,[2,40]),{2:$V$,8:155,9:156,10:150,11:151,12:152,13:153,14:154,16:157,17:158,18:159,19:160,20:161,21:162,22:163,23:164,24:165,25:166,26:167,27:$V01,30:172,37:$V11,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,51:$V21,53:$V31,108:$V41,113:$V51,118:$V61,120:$V71,121:$V81,122:$V91,123:$Va1},o($VZ,[2,43]),o($VB,[2,28]),o($Vb1,[2,55],{56:$VE,57:$VF,58:$VG,74:$VQ,99:$VS}),o($Vb1,[2,56],{56:$VE,57:$VF,58:$VG,74:$VQ,99:$VS}),o($Vc1,[2,57],{74:$VQ,99:$VS}),o($Vc1,[2,58],{74:$VQ,99:$VS}),o($Vc1,[2,59],{74:$VQ,99:$VS}),o($Vd1,[2,66],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,73:$VP,74:$VQ,99:$VS}),o($Vd1,[2,67],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,73:$VP,74:$VQ,99:$VS}),o($Vd1,[2,68],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,73:$VP,74:$VQ,99:$VS}),o($Vd1,[2,69],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,73:$VP,74:$VQ,99:$VS}),o($Vd1,[2,70],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,73:$VP,74:$VQ,99:$VS}),o($Vd1,[2,71],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,73:$VP,74:$VQ,99:$VS}),o($Ve1,[2,72],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,73:$VP,74:$VQ,99:$VS}),o($Ve1,[2,73],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,73:$VP,74:$VQ,99:$VS}),o($Vb1,[2,75],{56:$VE,57:$VF,58:$VG,74:$VQ,99:$VS}),o($V_,[2,76],{99:$VS}),{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,76:[1,181],99:$VS},{38:[1,182]},{38:[1,183]},{38:[1,184]},{38:[1,185]},{38:[1,186]},o($VT,[2,54]),{32:[1,187],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{40:[1,188],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{40:[1,189],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{40:[1,190],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{40:[1,191],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},o($VT,[2,105]),{32:$Vf1,40:[1,192]},o($VZ,[2,108],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS}),{40:[1,194],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{38:[1,195]},{38:[1,196]},{38:[1,197]},{40:[1,198],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{40:[1,199],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{40:[1,200],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},o($V7,[2,39]),o($VZ,[2,41]),{2:$V$,8:155,9:156,11:202,12:152,13:153,14:154,16:157,17:158,18:159,19:160,20:161,21:162,22:163,23:164,24:165,25:166,26:167,27:$V01,30:172,37:$V11,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,50:[1,201],51:$V21,53:$V31,108:$V41,113:$V51,118:$V61,120:$V71,121:$V81,122:$V91,123:$Va1},o($Vg1,[2,8]),o($Vg1,[2,9]),o($Vg1,[2,10]),{15:[1,203]},o($Vg1,[2,12]),o($Vg1,[2,13]),o($Vg1,[2,14]),o($Vg1,[2,15]),o($Vg1,[2,16]),o($Vg1,[2,17]),o($Vg1,[2,18]),o($Vg1,[2,19]),{15:[1,204]},{15:[1,205]},o($Vg1,[2,22]),o($Vg1,[2,23]),o($Vg1,[2,24]),o($Vg1,[2,25]),{38:[1,206]},{38:[1,207]},o($Va,$V8,{28:$V9,38:$VV,127:$VW,128:$VX}),{27:$Vh1,31:18,33:[1,208]},{14:48,15:[1,211],22:55,23:54,27:$Vd,29:210,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{38:[1,212]},{38:[1,213]},{15:[1,214]},{38:[1,215]},{41:216,49:$VY},{15:[1,217]},{27:[1,219],38:[1,218]},{14:48,22:55,23:54,27:$Vd,29:220,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{40:[1,221]},{40:[1,222]},{40:[1,223]},{14:48,22:55,23:54,27:$Vd,29:224,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:225,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:226,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},o($VT,[2,61]),o($VT,[2,62]),o($VT,[2,63]),o($VT,[2,64]),o($VT,[2,106]),{14:48,22:55,23:54,27:$Vd,29:227,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},o($VT,[2,86]),{14:48,22:55,23:54,27:$Vd,29:228,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:229,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:230,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},o($VT,[2,112]),o($VT,[2,114]),o($VT,[2,113]),o([2,5,27,37,43,44,45,46,47,48,50,51,53,108,112,113,117,118,119,120,121,122,123],[2,51]),o($Vg1,[2,7]),o($Vg1,[2,11]),o($Vg1,[2,20]),o($Vg1,[2,21]),{14:48,22:55,23:54,27:$Vd,29:140,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,52:231,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:140,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,52:232,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{34:[1,233]},o($Vb,$Vc),{15:[1,234],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},o($Vg1,[2,38]),{14:48,22:55,23:54,27:$Vd,29:235,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:236,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},o($Vg1,[2,133]),{14:48,22:55,23:54,27:$Vd,29:237,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{120:[1,238]},o($Vg1,[2,138]),{8:240,9:241,27:$V0,30:242,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,124:239},{125:[1,243]},o([15,32,34,40,49,75,76],[2,77],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,99:$VS}),o($VT,[2,115]),o($VT,[2,116]),o($VT,[2,117]),{32:[1,244],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{40:[1,245],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{40:[1,246],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},o($VZ,[2,107],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS}),{40:[1,247],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{40:[1,248],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{40:[1,249],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{32:$Vf1,40:[1,250]},{32:$Vf1,40:[1,251]},{27:[1,252]},o($Vg1,[2,37]),{40:[1,253],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{40:[1,254],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{40:[1,255],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{38:[1,256]},{14:48,22:55,23:54,27:$Vd,29:257,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},o($Vi1,[2,143]),o($Vi1,[2,144]),{27:$Vh1,31:18},{14:48,22:55,23:54,27:[1,260],29:258,33:$Vj1,35:259,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{14:48,22:55,23:54,27:$Vd,29:262,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},o($VT,[2,119]),o($VT,[2,60]),o($VT,[2,109]),o($VT,[2,110]),o($VT,[2,111]),{15:[1,263]},{15:[1,264]},{28:[1,265]},{2:$V$,8:155,9:156,11:267,12:152,13:153,14:154,16:157,17:158,18:159,19:160,20:161,21:162,22:163,23:164,24:165,25:166,26:167,27:$V01,30:172,37:$V11,41:266,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$VY,51:$V21,53:$V31,108:$V41,113:$V51,118:$V61,120:$V71,121:$V81,122:$V91,123:$Va1},{49:[1,268]},{41:269,49:$VY},{14:48,22:55,23:54,27:$Vd,29:270,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{15:[1,271],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{41:272,49:$VY,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{41:273,49:$VY},o([49,54,55,56,57,58,64,65,66,67,68,69,70,71,73,74,75,99],$VU,{33:[1,274],38:$VV,127:$VW,128:$VX}),{14:48,22:55,23:54,27:$Vd,29:276,33:$Vj1,35:277,36:275,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{40:[1,278],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},o($Vg1,[2,52]),o($Vg1,[2,53]),{33:$Vj1,35:279},o($Vg1,[2,120],{109:280,110:281,111:282,112:$Vk1}),o($Vg1,[2,121]),{114:284,116:285,117:$Vl1},o($Vg1,[2,136]),{40:[1,287],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{14:48,22:55,23:54,27:$Vd,29:288,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},o($Vg1,[2,140]),o($Vg1,[2,141]),{14:48,22:55,23:54,27:$Vd,29:289,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{32:[1,291],34:[1,290]},o($Vm1,[2,35],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS}),o($Vm1,[2,36]),o($VT,[2,118]),{15:[1,292]},o($Vg1,[2,122]),o($Vg1,[2,125],{110:281,111:282,109:293,112:$Vk1}),o($Vg1,[2,126],{110:281,111:282,109:294,112:$Vk1}),{41:296,49:$VY,108:[1,295]},{50:[2,135],115:297,116:298,117:$Vl1,119:[1,299]},o($Vn1,[2,131]),{14:48,22:55,23:54,27:$Vd,29:300,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},{15:[1,301]},{40:[1,302],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,76:[1,303],99:$VS},o([15,32,34,49],[2,32]),{14:48,22:55,23:54,27:$Vd,29:304,33:$Vj1,35:305,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},o($Vg1,[2,31]),o($Vg1,[2,123]),o($Vg1,[2,124]),{38:[1,306]},o($Vo1,[2,127]),{50:[1,307]},o($Vn1,[2,130]),{76:[1,308]},{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,76:[1,309],99:$VS},o($Vg1,[2,137]),{41:310,49:$VY},{14:48,22:55,23:54,27:$Vd,29:311,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},o($Vm1,[2,33],{54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS}),o($Vm1,[2,34]),{14:48,22:55,23:54,27:$Vd,29:312,38:$Ve,43:$Vf,44:$Vg,45:$Vh,46:$Vi,55:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,63:$Vo,72:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:42,86:43,87:44,88:45,89:46,90:47,91:49,92:50,93:51,94:52,95:53,101:$Vy,102:$Vz},o($Vg1,[2,129]),{2:$V$,8:155,9:156,10:313,11:151,12:152,13:153,14:154,16:157,17:158,18:159,19:160,20:161,21:162,22:163,23:164,24:165,25:166,26:167,27:$V01,30:172,37:$V11,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,51:$V21,53:$V31,108:$V41,113:$V51,118:$V61,120:$V71,121:$V81,122:$V91,123:$Va1},{2:$V$,8:155,9:156,10:314,11:151,12:152,13:153,14:154,16:157,17:158,18:159,19:160,20:161,21:162,22:163,23:164,24:165,25:166,26:167,27:$V01,30:172,37:$V11,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,51:$V21,53:$V31,108:$V41,113:$V51,118:$V61,120:$V71,121:$V81,122:$V91,123:$Va1},o($Vg1,[2,139]),{34:[1,315],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{40:[1,316],54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VP,74:$VQ,75:$VR,99:$VS},{2:$V$,8:155,9:156,11:202,12:152,13:153,14:154,16:157,17:158,18:159,19:160,20:161,21:162,22:163,23:164,24:165,25:166,26:167,27:$V01,30:172,37:$V11,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,50:[2,134],51:$V21,53:$V31,108:$V41,113:$V51,118:$V61,120:$V71,121:$V81,122:$V91,123:$Va1},o($Vn1,[2,132],{12:152,13:153,14:154,8:155,9:156,16:157,17:158,18:159,19:160,20:161,21:162,22:163,23:164,24:165,25:166,26:167,30:172,11:202,2:$V$,27:$V01,37:$V11,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,51:$V21,53:$V31,108:$V41,113:$V51,118:$V61,120:$V71,121:$V81,122:$V91,123:$Va1}),{41:317,49:$VY},{41:318,49:$VY},o($Vg1,[2,142]),o($Vo1,[2,128])],
defaultActions: {15:[2,1],66:[2,49]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var debugMode = false;
	function debugPrint(valor)
	{
		if(debugMode)
		{
			debugPrint(valor);
		}
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitve":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:return;
break;
case 4:return;
break;
case 5:return;
break;
case 6:return 78
break;
case 7:return 77
break;
case 8:return 79	  
break;
case 9:return 80
break;
case 10: debugPrint('>');return 68; 
break;
case 11: debugPrint('<');return 69; 
break;
case 12: debugPrint('>=');return 64; 
break;
case 13: debugPrint('<=');return 65; 
break;
case 14: debugPrint('==');return 67; 
break;
case 15: debugPrint('!=');return 66; 
break;
case 16: debugPrint('||');return 70; 
break;
case 17: debugPrint('?');return 75; 
break;
case 18: debugPrint('&&');return 71; 
break;
case 19: debugPrint('&');return 73; 
break;
case 20: debugPrint('!');return 72; 
break;
case 21: debugPrint('*');return 56; 
break;
case 22: debugPrint('/');return 57; 
break;
case 23: debugPrint('++');return 127; 
break;
case 24: debugPrint('--');return 128; 
break;
case 25: debugPrint('-');return 55; 
break;
case 26: debugPrint('+');return 54; 
break;
case 27: debugPrint('%');return 58; 
break;
case 28: debugPrint('^');return 74; 
break;
case 29: debugPrint('=');return 28; 
break;
case 30: debugPrint('(');return 38; 
break;
case 31: debugPrint(')');return 40; 
break;
case 32: debugPrint('{');return 49; 
break;
case 33: debugPrint('}');return 50; 
break;
case 34: debugPrint('[');return 33; 
break;
case 35: debugPrint(']');return 34; 
break;
case 36: debugPrint(',');return 32; 
break;
case 37: debugPrint('.');return 99; 
break;
case 38: debugPrint(':');return 76; 
break;
case 39: debugPrint(';');return 15; 
break;
case 40: debugPrint(yy_.yytext);return 81; 
break;
case 41: debugPrint(yy_.yytext);return 82; 
break;
case 42: debugPrint(yy_.yytext);return 83; 
break;
case 43: debugPrint(yy_.yytext);return 51; 
break;
case 44: debugPrint(yy_.yytext);return 53; 
break;
case 45: debugPrint(yy_.yytext);return 84; 
break;
case 46: debugPrint(yy_.yytext);return 'tnull'; 
break;
case 47: debugPrint(yy_.yytext);return 43; 
break;
case 48: debugPrint(yy_.yytext);return 44; 
break;
case 49: debugPrint(yy_.yytext);return 45; 
break;
case 50: debugPrint(yy_.yytext);return 47; 
break;
case 51: debugPrint(yy_.yytext);return 46; 
break;
case 52: debugPrint(yy_.yytext);return 48; 
break;
case 53: debugPrint(yy_.yytext);return 37; 
break;
case 54: debugPrint(yy_.yytext);return 59; 
break;
case 55: debugPrint(yy_.yytext);return 60; 
break;
case 56: debugPrint(yy_.yytext);return 61; 
break;
case 57: debugPrint(yy_.yytext);return 62; 
break;
case 58: debugPrint(yy_.yytext);return 63; 
break;
case 59: debugPrint(yy_.yytext);return 107; 
break;
case 60: debugPrint(yy_.yytext);return 106; 
break;
case 61: debugPrint(yy_.yytext);return 105; 
break;
case 62: debugPrint(yy_.yytext);return 104; 
break;
case 63: debugPrint(yy_.yytext);return 103; 
break;
case 64: debugPrint(yy_.yytext);return 'ToString'; 
break;
case 65: debugPrint(yy_.yytext);return 101; 
break;
case 66: debugPrint(yy_.yytext);return 102; 
break;
case 67: debugPrint(yy_.yytext);return 100; 
break;
case 68: debugPrint(yy_.yytext);return 113; 
break;
case 69: debugPrint(yy_.yytext);return 117; 
break;
case 70: debugPrint(yy_.yytext);return 118; 
break;
case 71: debugPrint(yy_.yytext);return 119; 
break;
case 72: debugPrint(yy_.yytext);return 120; 
break;
case 73: debugPrint(yy_.yytext);return 121; 
break;
case 74: debugPrint(yy_.yytext);return 108; 
break;
case 75: debugPrint(yy_.yytext);return 112; 
break;
case 76: debugPrint(yy_.yytext);return 123; 
break;
case 77: debugPrint(yy_.yytext);return 125; 
break;
case 78: debugPrint(yy_.yytext);return 122; 
break;
case 79: debugPrint(yy_.yytext); return 27; 
break;
case 80:return 5
break;
case 81:  Utils.registrarErrorLexico(yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext, 'Caracter no válido.'); return 'INVALIDO' 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:\/\*[^'*']*\*\/)/,/^(?:\/\/[^\r\n]*[^\r\n])/,/^(?:\/\*[^"*"]\*\/)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:"(\\.|[^"])*")/,/^(?:'(\\.|[^'])')/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\^)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:typeof\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:toString\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:parse\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:continue\b)/,/^(?:([a-zA-Z]|_|\$)([a-zA-Z]|[0-9]|_|\$)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}