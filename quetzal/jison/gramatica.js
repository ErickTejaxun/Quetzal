/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[5,22,34,35,36,37,38],$V7=[2,37],$V8=[1,18],$V9=[15,23,27],$Va=[2,25],$Vb=[1,34],$Vc=[1,24],$Vd=[1,55],$Ve=[1,54],$Vf=[1,57],$Vg=[1,30],$Vh=[1,25],$Vi=[1,26],$Vj=[1,27],$Vk=[1,28],$Vl=[1,29],$Vm=[1,31],$Vn=[1,32],$Vo=[1,33],$Vp=[1,35],$Vq=[1,36],$Vr=[1,37],$Vs=[1,38],$Vt=[1,39],$Vu=[1,40],$Vv=[1,53],$Vw=[1,56],$Vx=[1,58],$Vy=[1,63],$Vz=[2,5,22,28,34,35,36,37,38,40,41,43,96,100,104,105,106,107,108],$VA=[1,67],$VB=[1,68],$VC=[1,69],$VD=[1,70],$VE=[1,71],$VF=[1,72],$VG=[1,73],$VH=[1,74],$VI=[1,75],$VJ=[1,76],$VK=[1,77],$VL=[1,78],$VM=[1,79],$VN=[1,80],$VO=[1,81],$VP=[1,82],$VQ=[1,83],$VR=[15,27,31,44,45,46,47,48,54,55,56,57,58,59,60,61,63,64,65,66,87],$VS=[1,92],$VT=[1,103],$VU=[27,31],$VV=[15,27,31,44,45,46,47,48,54,55,56,57,58,59,60,61,63,64,65,66],$VW=[1,158],$VX=[1,161],$VY=[1,163],$VZ=[1,159],$V_=[1,160],$V$=[1,164],$V01=[1,165],$V11=[1,166],$V21=[1,167],$V31=[1,168],$V41=[15,27,31,44,45,54,55,56,57,58,59,60,61,63,65,66],$V51=[15,27,31,44,45,46,47,48,54,55,56,57,58,59,60,61,63,65,66],$V61=[15,27,31,54,55,56,57,58,59,60,61,65,66],$V71=[15,27,31,60,61,65,66],$V81=[1,181],$V91=[2,22,28,34,35,36,37,38,40,41,43,96,100,104,105,106,107,108],$Va1=[1,246],$Vb1=[1,251],$Vc1=[40,104,106];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONESG":4,"EOF":5,"INSTRUCCIONG":6,"FUNCION":7,"ASIGNACION":8,"DECLARACION":9,"INSTRUCCIONES":10,"INSTRUCCION":11,"PRINTLN":12,"PRINT":13,"LLAMADA":14,";":15,"RETORNO":16,"IFINST":17,"SWITCHINST":18,"BREAKINST":19,"WHILEINST":20,"DOWHILEINST":21,"id":22,"=":23,"E":24,"TIPO":25,"LID":26,",":27,"retorno":28,"(":29,"LPARAMETROS":30,")":31,"BLOQUE":32,"PARAMETRO":33,"tint":34,"tdouble":35,"tstring":36,"tchar":37,"tvoid":38,"{":39,"}":40,"println":41,"LExpr":42,"print":43,"+":44,"-":45,"*":46,"/":47,"%":48,"pow":49,"sqrt":50,"sin":51,"cos":52,"tan":53,">=":54,"<=":55,"!=":56,"==":57,">":58,"<":59,"||":60,"&&":61,"!":62,"&":63,"^":64,"?":65,":":66,"entero":67,"double":68,"texto":69,"caracter":70,"nulo":71,"verdadero":72,"falso":73,"tipode":74,"PARSEBOOL":75,"PARSEDOUBLE":76,"PARSEINT":77,"NATIVATOINT":78,"NATIVATOSTRING":79,"NATIVATODOUBLE":80,"LOWERCADENA":81,"UPPERCADENA":82,"LENGTHCADENA":83,"PORCIONCADENA":84,"POSICIONCADENA":85,"boolean":86,".":87,"parse":88,"ToInt":89,"ToDouble":90,"caracterlower":91,"caracterupper":92,"caracterlength":93,"caracterporcion":94,"caracterposicion":95,"Rif":96,"ELSEIFINSTSS":97,"Relse":98,"ELSEIFINST":99,"Rswitch":100,"LISTACASE":101,"DEFAULTINST":102,"CASE":103,"Rcase":104,"Rbreak":105,"Rdefault":106,"Rwhile":107,"Rdo":108,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:";",22:"id",23:"=",27:",",28:"retorno",29:"(",31:")",34:"tint",35:"tdouble",36:"tstring",37:"tchar",38:"tvoid",39:"{",40:"}",41:"println",43:"print",44:"+",45:"-",46:"*",47:"/",48:"%",49:"pow",50:"sqrt",51:"sin",52:"cos",53:"tan",54:">=",55:"<=",56:"!=",57:"==",58:">",59:"<",60:"||",61:"&&",62:"!",63:"&",64:"^",65:"?",66:":",67:"entero",68:"double",69:"texto",70:"caracter",71:"nulo",72:"verdadero",73:"falso",74:"tipode",86:"boolean",87:".",88:"parse",89:"ToInt",90:"ToDouble",91:"caracterlower",92:"caracterupper",93:"caracterlength",94:"caracterporcion",95:"caracterposicion",96:"Rif",98:"Relse",100:"Rswitch",104:"Rcase",105:"Rbreak",106:"Rdefault",107:"Rwhile",108:"Rdo"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[10,2],[10,1],[11,1],[11,1],[11,2],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[8,4],[9,3],[9,5],[26,3],[26,1],[16,3],[16,2],[7,6],[7,5],[30,3],[30,1],[33,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[32,3],[12,5],[13,5],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,6],[24,4],[24,4],[24,4],[24,4],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,5],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,4],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[14,3],[14,4],[42,3],[42,1],[75,6],[76,6],[77,6],[78,4],[80,4],[79,4],[81,5],[82,5],[83,5],[84,8],[85,6],[17,5],[17,5],[17,8],[17,7],[97,2],[97,1],[99,6],[18,8],[101,2],[101,1],[103,4],[19,2],[102,3],[102,0],[20,5],[21,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
		
	return new Raiz($$[$0-1].linea, $$[$0-1].columna, $$[$0-1]); 

break;
case 2: case 7:
 
				  	this.$ = $$[$0-1]; 
					this.$.registrarInstruccion($$[$0]);
				
break;
case 3:
 
					this.$ = new Bloque(_$[$0].first_line-1,_$[$0].first_column-1); 
					if($$[$0]!=null){this.$.registrarInstruccion($$[$0]);} // Si es nulo, viene de un error manejado en otras producciones.
				
break;
case 4: case 9: case 10:
 this.$ = $$[$0];
break;
case 5: case 6: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19:
this.$ = $$[$0];
break;
case 8:
 
							this.$ = new Bloque(_$[$0].first_line-1,_$[$0].first_column-1); 
							if($$[$0]!=null){this.$.registrarInstruccion($$[$0]);} // Si es nulo, viene de un error manejado en otras producciones.
						  
break;
case 11:
this.$ =$$[$0-1];
break;
case 20:
 	
						Utils.registrarErrorSintactico(_$[$0].first_line-1,_$[$0].first_column-1, $$[$0], $$[$0]);
						this.$ = null;						
					
break;
case 21:
 this.$ = new Asignacion(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-3],$$[$0-1]); 
break;
case 22:
 this.$ = new Declaracion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0-1],null);
break;
case 23:
 this.$ = new Declaracion(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4],$$[$0-3],$$[$0-1]);
break;
case 24:
this.$  =$$[$0-2]; this.$.push($$[$0]);
break;
case 25:
 this.$ = new Array; this.$.push($$[$0]); 
break;
case 26:
 this.$= new Retorno(_$[$0-2].first_line-1,_$[$0-2].first_column-1, $$[$0-1]);
break;
case 27:
 this.$= new Retorno(_$[$0-1].first_line-1,_$[$0-1].first_column-1, null);
break;
case 28:
 this.$ = new Funcion(_$[$0-5].first_line-1,_$[$0-5].first_column-1, $$[$0-5], $$[$0-4], $$[$0-2],$$[$0]);
break;
case 29:
 this.$ = new Funcion(_$[$0-4].first_line-1,_$[$0-4].first_column-1, $$[$0-4], $$[$0-3], new Array,$$[$0]);
break;
case 30:
this.$ =$$[$0-2]; this.$.push($$[$0]);
break;
case 31: case 111:
this.$ = new Array; this.$.push($$[$0]);
break;
case 32:
 this.$ = new Parametro(_$[$0-1].first_line-1,_$[$0-1].first_column-1, $$[$0-1], $$[$0]);
break;
case 33:
 this.$ = new Tipo(TipoPrimitivo.INT);
break;
case 34:
 this.$ = new Tipo(TipoPrimitivo.DOUBLE);
break;
case 35:
 this.$ = new Tipo(TipoPrimitivo.STRING);
break;
case 36:
 this.$ = new Tipo(TipoPrimitivo.CHAR);
break;
case 37:
this.$ = new Tipo(TipoPrimitivo.STRUCT, $$[$0]);
break;
case 38:
 this.$ = new Tipo(TipoPrimitivo.VOID);
break;
case 39:
this.$ = $$[$0-1]; 
break;
case 40:
				
			var nodo_concatenar = null;
			if($$[$0-2].length== 1)
			{
				nodo_concatenar = $$[$0-2][0];
			}				
			else
			{
				var nodoTmp = $$[$0-2][0]; // primer expresion
				var i = 1;
				for( i=1; i<$$[$0-2].length; i++)
				{
					var nodo = $$[$0-2][i];
					var nodoTmp = new Concatenar(nodoTmp.linea, nodoTmp.columna, nodoTmp, nodo);					
				}											
				nodo_concatenar = nodoTmp;
			}		
			this.$ = new Println(_$[$0-4].first_line-1,_$[$0-4].first_column-1, nodo_concatenar);						
		
break;
case 41:

			var nodo_concatenar = null;
			if($$[$0-2].length== 1)
			{
				nodo_concatenar = $$[$0-2][0];
			}				
			else
			{
				var nodoTmp = $$[$0-2][0]; // primer expresion
				var i = 1;
				for( i=1; i<$$[$0-2].length; i++)
				{
					var nodo = $$[$0-2][i];
					var nodoTmp = new Concatenar(nodoTmp.linea, nodoTmp.columna, nodoTmp, nodo);					
				}											
				nodo_concatenar = nodoTmp;
			}		
			this.$ = new Print(_$[$0-4].first_line-1,_$[$0-4].first_column-1, nodo_concatenar);			
		
break;
case 42:

		this.$ = $$[$0-1];		
	
break;
case 43:

		this.$ = new Suma(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);	
	
break;
case 44:

		this.$ = new Resta(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 45:

		this.$ = new Multiplicacion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 46:

		this.$ = new Division(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 47:

		this.$ = new Modulo(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 48:

		this.$ = new Potencia(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-3], $$[$0-1]);
	
break;
case 49:

		this.$ = new RaizCuadrada(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 50:

		this.$ = new Seno(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 51:

		this.$ = new Coseno(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 52:

		this.$ = new Tangente(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 53:

		this.$ = new Menos(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0]);
	
break;
case 54:

		this.$ = new MayorIgual(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 55:

		this.$ = new MenorIgual(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 56:

		this.$ = new Diferenciacion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 57:

		this.$ = new Igualdad(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 58:

		this.$ = new MayorQue(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 59:

		this.$ = new MenorQue(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 60:

		this.$ = new OrLog(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 61:

		this.$ = new AndLog(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 62:

		this.$ = new NotLog(_$[$0].first_line,_$[$0].first_column,$$[$0]);
	
break;
case 63:

		this.$ = new Concatenar(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 64:

		this.$ = new PotenciaString(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 65:

		this.$ = new Ternario(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4],$$[$0-2], $$[$0]);
	
break;
case 66:

		this.$ = new Entero(_$[$0].first_line-1,_$[$0].first_column-1, parseInt($$[$0]));
	
break;
case 67:

		this.$ = new Double(_$[$0].first_line-1,_$[$0].first_column-1, parseFloat($$[$0]));
	
break;
case 68:

		this.$ = new ExpVariable(_$[$0].first_line-1,_$[$0].first_column-1,$$[$0]);
	
break;
case 69:

		this.$ = new ExpString(_$[$0].first_line-1,_$[$0].first_column-1,$$[$0].substring(1,$$[$0].length-1));
		
	
break;
case 70:

		this.$ = new Caracter(_$[$0].first_line,_$[$0].first_column,$$[$0].substring(1,$$[$0].length-1));
	
break;
case 71:

		this.$ = new Nulo(_$[$0].first_line-1,_$[$0].first_column-1);
	
break;
case 72:

		this.$ = new ExpBooleana(_$[$0].first_line-1,_$[$0].first_column-1, true);
	
break;
case 73:

		this.$ = new ExpBooleana(_$[$0].first_line-1,_$[$0].first_column-1, false);
	
break;
case 74:

		this.$ = new TipoDe(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86:
this.$= $$[$0];
break;
case 87:
 this.$ = new Llamada(_$[$0-2].first_line-1,_$[$0-2].first_column-1, $$[$0-2], new Array);
break;
case 88:
 this.$ = new Llamada(_$[$0-3].first_line-1,_$[$0-3].first_column-1, $$[$0-3], $$[$0-1]);
break;
case 89:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 90: case 107:
this.$= new Array; this.$.push($$[$0]);
break;
case 91:
 this.$ = new ParseBool(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 92:
 this.$ = new ParseDouble(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 93:
 this.$ = new ParseInt(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 94:
 this.$ = new NativaToInt(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 95:
 this.$ = new NativaToDouble(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 96:
 this.$ = new NativaToString(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 97:
 this.$ = new LowerCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 98:
 this.$ = new UpperCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 99:
 this.$ = new LengthCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 100:
 this.$ = new PorcionCadena(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-7],$$[$0-3],$$[$0-1]);
break;
case 101:
 this.$ = new PosicionCadena(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-5],$$[$0-1]);
break;
case 106:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 109:
 this.$= new SwitchInst(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-5],$$[$0-2],$$[$0-1]);
break;
case 110:
this.$ =$$[$0-1]; this.$.push($$[$0]);
break;
case 112:
 this.$= new CaseInst(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-2],$$[$0]);
break;
case 113:
 this.$= new BreakInst(_$[$0-1].first_line-1,_$[$0-1].first_column-1);
break;
case 114:
 this.$= new DefaultInst(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0]);
break;
case 116:
 this.$= new WhileInst(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-2],$$[$0]);
break;
case 117:
 this.$= new DoWhileInst(_$[$0-6].first_line-1,_$[$0-6].first_column-1,$$[$0-5],$$[$0-2]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,22:$V0,25:7,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5},{1:[3]},{5:[1,14],6:15,7:4,8:5,9:6,22:$V0,25:7,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5},o($V6,[2,3]),o($V6,[2,4]),o($V6,[2,5]),o($V6,[2,6]),{22:[1,16],26:17},{22:$V7,23:$V8},{22:[2,33]},{22:[2,34]},{22:[2,35]},{22:[2,36]},{22:[2,38]},{1:[2,1]},o($V6,[2,2]),o($V9,$Va,{29:[1,19]}),{15:[1,20],23:[1,21],27:[1,22]},{14:47,22:$Vb,24:23,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{22:$Vy,25:62,30:59,31:[1,60],33:61,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5},o($Vz,[2,22]),{14:47,22:$Vb,24:64,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{22:[1,65]},{15:[1,66],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{14:47,22:$Vb,24:84,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{29:[1,85]},{29:[1,86]},{29:[1,87]},{29:[1,88]},{29:[1,89]},{14:47,22:$Vb,24:90,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:91,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},o($VR,[2,66]),o($VR,[2,67]),o($VR,[2,68],{29:$VS}),o($VR,[2,69]),o($VR,[2,70]),o($VR,[2,71]),o($VR,[2,72]),o($VR,[2,73]),{29:[1,93]},o($VR,[2,75]),o($VR,[2,76]),o($VR,[2,77]),o($VR,[2,78]),o($VR,[2,79]),o($VR,[2,80]),o($VR,[2,81]),o($VR,[2,82]),o($VR,[2,83]),o($VR,[2,84]),o($VR,[2,85]),o($VR,[2,86]),{87:[1,94]},{87:[1,95]},{87:[1,96]},{29:[1,97]},{29:[1,98]},{29:[1,99]},{27:[1,101],31:[1,100]},{32:102,39:$VT},o($VU,[2,31]),{22:[1,104]},{22:$V7},{15:[1,105],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},o($V9,[2,24]),o($Vz,[2,21]),{14:47,22:$Vb,24:106,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:107,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:108,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:109,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:110,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:111,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:112,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:113,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:114,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:115,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:116,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:117,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:118,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:119,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:120,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:121,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{91:[1,122],92:[1,123],93:[1,124],94:[1,125],95:[1,126]},{31:[1,127],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{14:47,22:$Vb,24:128,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:129,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:130,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:131,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:132,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},o($VV,[2,53],{87:$VQ}),o($VV,[2,62],{87:$VQ}),{14:47,22:$Vb,24:135,29:$Vc,31:[1,133],34:$Vd,35:$Ve,36:$Vf,42:134,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:136,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{88:[1,137]},{88:[1,138]},{88:[1,139]},{14:47,22:$Vb,24:140,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:141,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:142,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{32:143,39:$VT},{22:$Vy,25:62,33:144,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5},o($V6,[2,29]),{2:$VW,8:150,9:151,10:145,11:146,12:147,13:148,14:149,16:152,17:153,18:154,19:155,20:156,21:157,22:$VX,25:162,28:$VY,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,41:$VZ,43:$V_,96:$V$,100:$V01,105:$V11,107:$V21,108:$V31},o($VU,[2,32]),o($Vz,[2,23]),o($V41,[2,43],{46:$VC,47:$VD,48:$VE,64:$VO,87:$VQ}),o($V41,[2,44],{46:$VC,47:$VD,48:$VE,64:$VO,87:$VQ}),o($V51,[2,45],{64:$VO,87:$VQ}),o($V51,[2,46],{64:$VO,87:$VQ}),o($V51,[2,47],{64:$VO,87:$VQ}),o($V61,[2,54],{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,63:$VN,64:$VO,87:$VQ}),o($V61,[2,55],{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,63:$VN,64:$VO,87:$VQ}),o($V61,[2,56],{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,63:$VN,64:$VO,87:$VQ}),o($V61,[2,57],{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,63:$VN,64:$VO,87:$VQ}),o($V61,[2,58],{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,63:$VN,64:$VO,87:$VQ}),o($V61,[2,59],{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,63:$VN,64:$VO,87:$VQ}),o($V71,[2,60],{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,63:$VN,64:$VO,87:$VQ}),o($V71,[2,61],{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,63:$VN,64:$VO,87:$VQ}),o($V41,[2,63],{46:$VC,47:$VD,48:$VE,64:$VO,87:$VQ}),o($VV,[2,64],{87:$VQ}),{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,66:[1,169],87:$VQ},{29:[1,170]},{29:[1,171]},{29:[1,172]},{29:[1,173]},{29:[1,174]},o($VR,[2,42]),{27:[1,175],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{31:[1,176],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{31:[1,177],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{31:[1,178],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{31:[1,179],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},o($VR,[2,87]),{27:$V81,31:[1,180]},o($VU,[2,90],{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ}),{31:[1,182],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{29:[1,183]},{29:[1,184]},{29:[1,185]},{31:[1,186],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{31:[1,187],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{31:[1,188],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},o($V6,[2,28]),o($VU,[2,30]),{2:$VW,8:150,9:151,11:190,12:147,13:148,14:149,16:152,17:153,18:154,19:155,20:156,21:157,22:$VX,25:162,28:$VY,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:[1,189],41:$VZ,43:$V_,96:$V$,100:$V01,105:$V11,107:$V21,108:$V31},o($V91,[2,8]),o($V91,[2,9]),o($V91,[2,10]),{15:[1,191]},o($V91,[2,12]),o($V91,[2,13]),o($V91,[2,14]),o($V91,[2,15]),o($V91,[2,16]),o($V91,[2,17]),o($V91,[2,18]),o($V91,[2,19]),o($V91,[2,20]),{29:[1,192]},{29:[1,193]},{22:$V7,23:$V8,29:$VS},{22:[1,194],26:17},{14:47,15:[1,196],22:$Vb,24:195,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{29:[1,197]},{29:[1,198]},{15:[1,199]},{29:[1,200]},{32:201,39:$VT},{14:47,22:$Vb,24:202,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{31:[1,203]},{31:[1,204]},{31:[1,205]},{14:47,22:$Vb,24:206,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:207,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:208,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},o($VR,[2,49]),o($VR,[2,50]),o($VR,[2,51]),o($VR,[2,52]),o($VR,[2,88]),{14:47,22:$Vb,24:209,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},o($VR,[2,74]),{14:47,22:$Vb,24:210,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:211,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:212,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},o($VR,[2,94]),o($VR,[2,96]),o($VR,[2,95]),o([2,5,22,28,34,35,36,37,38,40,41,43,96,98,100,104,105,106,107,108],[2,39]),o($V91,[2,7]),o($V91,[2,11]),{14:47,22:$Vb,24:135,29:$Vc,34:$Vd,35:$Ve,36:$Vf,42:213,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:135,29:$Vc,34:$Vd,35:$Ve,36:$Vf,42:214,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},o($V9,$Va),{15:[1,215],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},o($V91,[2,27]),{14:47,22:$Vb,24:216,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{14:47,22:$Vb,24:217,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},o($V91,[2,113]),{14:47,22:$Vb,24:218,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{107:[1,219]},o([15,27,31,65,66],[2,65],{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,87:$VQ}),o($VR,[2,97]),o($VR,[2,98]),o($VR,[2,99]),{27:[1,220],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{31:[1,221],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{31:[1,222],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},o($VU,[2,89],{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ}),{31:[1,223],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{31:[1,224],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{31:[1,225],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{27:$V81,31:[1,226]},{27:$V81,31:[1,227]},o($V91,[2,26]),{31:[1,228],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{31:[1,229],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{31:[1,230],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{29:[1,231]},{14:47,22:$Vb,24:232,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},o($VR,[2,101]),o($VR,[2,48]),o($VR,[2,91]),o($VR,[2,92]),o($VR,[2,93]),{15:[1,233]},{15:[1,234]},{2:$VW,8:150,9:151,11:236,12:147,13:148,14:149,16:152,17:153,18:154,19:155,20:156,21:157,22:$VX,25:162,28:$VY,32:235,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,39:$VT,41:$VZ,43:$V_,96:$V$,100:$V01,105:$V11,107:$V21,108:$V31},{39:[1,237]},{32:238,39:$VT},{14:47,22:$Vb,24:239,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{31:[1,240],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},o($V91,[2,40]),o($V91,[2,41]),o($V91,[2,102],{97:241,99:243,98:[1,242]}),o($V91,[2,103]),{101:244,103:245,104:$Va1},o($V91,[2,116]),{31:[1,247],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},o($VR,[2,100]),{98:[1,248],99:249},{32:250,39:$VT,96:$Vb1},{98:[2,107]},{40:[2,115],102:252,103:253,104:$Va1,106:[1,254]},o($Vc1,[2,111]),{14:47,22:$Vb,24:255,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},{15:[1,256]},{32:257,39:$VT,96:$Vb1},{98:[2,106]},o($V91,[2,105]),{29:[1,258]},{40:[1,259]},o($Vc1,[2,110]),{66:[1,260]},{44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,66:[1,261],87:$VQ},o($V91,[2,117]),o($V91,[2,104]),{14:47,22:$Vb,24:262,29:$Vc,34:$Vd,35:$Ve,36:$Vf,45:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,62:$Vm,67:$Vn,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:$Vt,74:$Vu,75:41,76:42,77:43,78:44,79:45,80:46,81:48,82:49,83:50,84:51,85:52,86:$Vv,89:$Vw,90:$Vx},o($V91,[2,109]),{2:$VW,8:150,9:151,10:263,11:146,12:147,13:148,14:149,16:152,17:153,18:154,19:155,20:156,21:157,22:$VX,25:162,28:$VY,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,41:$VZ,43:$V_,96:$V$,100:$V01,105:$V11,107:$V21,108:$V31},{2:$VW,8:150,9:151,10:264,11:146,12:147,13:148,14:149,16:152,17:153,18:154,19:155,20:156,21:157,22:$VX,25:162,28:$VY,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,41:$VZ,43:$V_,96:$V$,100:$V01,105:$V11,107:$V21,108:$V31},{31:[1,265],44:$VA,45:$VB,46:$VC,47:$VD,48:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,63:$VN,64:$VO,65:$VP,87:$VQ},{2:$VW,8:150,9:151,11:190,12:147,13:148,14:149,16:152,17:153,18:154,19:155,20:156,21:157,22:$VX,25:162,28:$VY,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,40:[2,114],41:$VZ,43:$V_,96:$V$,100:$V01,105:$V11,107:$V21,108:$V31},o($Vc1,[2,112],{12:147,13:148,14:149,8:150,9:151,16:152,17:153,18:154,19:155,20:156,21:157,25:162,11:190,2:$VW,22:$VX,28:$VY,34:$V1,35:$V2,36:$V3,37:$V4,38:$V5,41:$VZ,43:$V_,96:$V$,100:$V01,105:$V11,107:$V21,108:$V31}),{32:266,39:$VT},{98:[2,108]}],
defaultActions: {9:[2,33],10:[2,34],11:[2,35],12:[2,36],13:[2,38],14:[2,1],63:[2,37],243:[2,107],249:[2,106],266:[2,108]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var debugMode = false;
	function debugPrint(valor)
	{
		if(debugMode)
		{
			debugPrint(valor);
		}
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitve":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:return;
break;
case 4:return;
break;
case 5:return;
break;
case 6:return 68
break;
case 7:return 67
break;
case 8:return 69
break;
case 9:return 70
break;
case 10: debugPrint('>');return 58; 
break;
case 11: debugPrint('<');return 59; 
break;
case 12: debugPrint('>=');return 54; 
break;
case 13: debugPrint('<=');return 55; 
break;
case 14: debugPrint('==');return 57; 
break;
case 15: debugPrint('!=');return 56; 
break;
case 16: debugPrint('||');return 60; 
break;
case 17: debugPrint('?');return 65; 
break;
case 18: debugPrint('&&');return 61; 
break;
case 19: debugPrint('&');return 63; 
break;
case 20: debugPrint('!');return 62; 
break;
case 21: debugPrint('*');return 46; 
break;
case 22: debugPrint('/');return 47; 
break;
case 23: debugPrint('-');return 45; 
break;
case 24: debugPrint('+');return 44; 
break;
case 25: debugPrint('%');return 48; 
break;
case 26: debugPrint('^');return 64; 
break;
case 27: debugPrint('=');return 23; 
break;
case 28: debugPrint('(');return 29; 
break;
case 29: debugPrint(')');return 31; 
break;
case 30: debugPrint('{');return 39; 
break;
case 31: debugPrint('}');return 40; 
break;
case 32: debugPrint('[');return '['; 
break;
case 33: debugPrint(']');return ']'; 
break;
case 34: debugPrint(',');return 27; 
break;
case 35: debugPrint('.');return 87; 
break;
case 36: debugPrint(':');return 66; 
break;
case 37: debugPrint(';');return 15; 
break;
case 38: debugPrint(yy_.yytext);return 71; 
break;
case 39: debugPrint(yy_.yytext);return 72; 
break;
case 40: debugPrint(yy_.yytext);return 73; 
break;
case 41: debugPrint(yy_.yytext);return 41; 
break;
case 42: debugPrint(yy_.yytext);return 43; 
break;
case 43: debugPrint(yy_.yytext);return 74; 
break;
case 44: debugPrint(yy_.yytext);return 'tnull'; 
break;
case 45: debugPrint(yy_.yytext);return 34; 
break;
case 46: debugPrint(yy_.yytext);return 35; 
break;
case 47: debugPrint(yy_.yytext);return 86; 
break;
case 48: debugPrint(yy_.yytext);return 37; 
break;
case 49: debugPrint(yy_.yytext);return 36; 
break;
case 50: debugPrint(yy_.yytext);return 38; 
break;
case 51: debugPrint(yy_.yytext);return 28; 
break;
case 52: debugPrint(yy_.yytext);return 49; 
break;
case 53: debugPrint(yy_.yytext);return 50; 
break;
case 54: debugPrint(yy_.yytext);return 51; 
break;
case 55: debugPrint(yy_.yytext);return 52; 
break;
case 56: debugPrint(yy_.yytext);return 53; 
break;
case 57: debugPrint(yy_.yytext);return 95; 
break;
case 58: debugPrint(yy_.yytext);return 94; 
break;
case 59: debugPrint(yy_.yytext);return 93; 
break;
case 60: debugPrint(yy_.yytext);return 92; 
break;
case 61: debugPrint(yy_.yytext);return 91; 
break;
case 62: debugPrint(yy_.yytext);return 'ToString'; 
break;
case 63: debugPrint(yy_.yytext);return 89; 
break;
case 64: debugPrint(yy_.yytext);return 90; 
break;
case 65: debugPrint(yy_.yytext);return 88; 
break;
case 66: debugPrint(yy_.yytext);return 100; 
break;
case 67: debugPrint(yy_.yytext);return 104; 
break;
case 68: debugPrint(yy_.yytext);return 105; 
break;
case 69: debugPrint(yy_.yytext);return 106; 
break;
case 70: debugPrint(yy_.yytext);return 107; 
break;
case 71: debugPrint(yy_.yytext);return 108; 
break;
case 72: debugPrint(yy_.yytext);return 96; 
break;
case 73: debugPrint(yy_.yytext);return 98; 
break;
case 74: debugPrint(yy_.yytext);return 'Rfor'; 
break;
case 75: debugPrint(yy_.yytext);return 'Rin'; 
break;
case 76: debugPrint(yy_.yytext); return 22; 
break;
case 77:return 5
break;
case 78:  Utils.registrarErrorLexico(yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext, 'Caracter no válido.'); return 'INVALIDO' 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:\/\*[^'*']*\*\/)/,/^(?:\/\/[^\r\n]*[^\r\n])/,/^(?:\/\*[^"*"]\*\/)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:"(\\.|[^"])*")/,/^(?:'(\\.|[^'])')/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\^)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:typeof\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:toString\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:parse\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:([a-zA-Z]|_|\$)([a-zA-Z]|[0-9]|_|\$)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}