/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[5,27,43,44,45,46,47,48],$V8=[1,20],$V9=[27,33],$Va=[2,50],$Vb=[1,21],$Vc=[16,28,32],$Vd=[2,31],$Ve=[1,38],$Vf=[1,28],$Vg=[1,62],$Vh=[1,61],$Vi=[1,60],$Vj=[1,64],$Vk=[1,34],$Vl=[1,29],$Vm=[1,30],$Vn=[1,31],$Vo=[1,32],$Vp=[1,33],$Vq=[1,35],$Vr=[1,36],$Vs=[1,37],$Vt=[1,39],$Vu=[1,40],$Vv=[1,41],$Vw=[1,42],$Vx=[1,43],$Vy=[1,44],$Vz=[1,63],$VA=[1,65],$VB=[1,70],$VC=[2,5,27,37,38,43,44,45,46,47,48,50,51,53,55,59,60,61,62,63,72,77,78,79,80,81,82,83,84,105,106,112,117,121,122,123,124,125,126,127],$VD=[1,75],$VE=[1,76],$VF=[1,77],$VG=[1,78],$VH=[1,79],$VI=[1,80],$VJ=[1,81],$VK=[1,82],$VL=[1,83],$VM=[1,84],$VN=[1,85],$VO=[1,86],$VP=[1,87],$VQ=[1,88],$VR=[1,89],$VS=[1,90],$VT=[1,91],$VU=[16,32,34,40,49,54,55,56,57,58,64,65,66,67,68,69,70,71,73,74,75,76,103],$VV=[1,100],$VW=[1,102],$VX=[1,103],$VY=[1,115],$VZ=[32,40],$V_=[16,32,34,40,49,54,55,56,57,58,64,65,66,67,68,69,70,71,73,74,75,76],$V$=[1,181],$V01=[1,184],$V11=[1,186],$V21=[1,182],$V31=[1,183],$V41=[1,187],$V51=[1,188],$V61=[1,189],$V71=[1,190],$V81=[1,191],$V91=[1,192],$Va1=[1,193],$Vb1=[1,195],$Vc1=[16,32,34,40,49,54,55,64,65,66,67,68,69,70,71,73,75,76],$Vd1=[16,32,34,40,49,54,55,56,57,58,64,65,66,67,68,69,70,71,73,75,76],$Ve1=[16,32,34,40,49,64,65,66,67,68,69,70,71,75,76],$Vf1=[16,32,34,40,49,70,71,75,76],$Vg1=[1,208],$Vh1=[16,32,33,34,40,49,54,55,56,57,58,64,65,66,67,68,69,70,71,73,74,75,76,103],$Vi1=[2,27,37,43,44,45,46,47,48,50,51,53,112,117,121,122,123,124,125,126,127],$Vj1=[1,226],$Vk1=[32,34],$Vl1=[27,38,43,44,45,46,55,59,60,61,62,63,72,77,78,79,80,81,82,83,84,105,106],$Vm1=[1,301],$Vn1=[1,304],$Vo1=[50,121,123],$Vp1=[2,27,37,43,44,45,46,47,48,50,51,53,112,116,117,121,122,123,124,125,126,127];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONESG":4,"EOF":5,"INSTRUCCIONG":6,"FUNCION":7,"ASIGNACION":8,"DECLARACION":9,"DECLARACCIONARREGLO":10,"INSTRUCCIONES":11,"INSTRUCCION":12,"PRINTLN":13,"PRINT":14,"LLAMADA":15,";":16,"RETORNO":17,"IFINST":18,"SWITCHINST":19,"BREAKINST":20,"WHILEINST":21,"DOWHILEINST":22,"AUMENTO":23,"DECREMENTO":24,"CONTINUEINST":25,"FORINST":26,"id":27,"=":28,"E":29,"TIPO":30,"LID":31,",":32,"[":33,"]":34,"EXPARREGLO":35,"LExprArreglo":36,"retorno":37,"(":38,"LPARAMETROS":39,")":40,"BLOQUE":41,"PARAMETRO":42,"tint":43,"tdouble":44,"tboolean":45,"tstring":46,"tchar":47,"tvoid":48,"{":49,"}":50,"println":51,"LExpr":52,"print":53,"+":54,"-":55,"*":56,"/":57,"%":58,"pow":59,"sqrt":60,"sin":61,"cos":62,"tan":63,">=":64,"<=":65,"!=":66,"==":67,">":68,"<":69,"||":70,"&&":71,"!":72,"&":73,"^":74,"?":75,":":76,"entero":77,"double":78,"texto":79,"caracter":80,"nulo":81,"verdadero":82,"falso":83,"tipode":84,"PARSEBOOL":85,"PARSEDOUBLE":86,"PARSEINT":87,"NATIVATOINT":88,"NATIVATOSTRING":89,"NATIVATODOUBLE":90,"LOWERCADENA":91,"UPPERCADENA":92,"LENGTHCADENA":93,"PORCIONCADENA":94,"POSICIONCADENA":95,"ACCESOARREGLO":96,"LINDICES":97,"INDICE":98,"INICIOA":99,"FINA":100,"Rbegin":101,"Rend":102,".":103,"parse":104,"ToInt":105,"ToDouble":106,"caracterlower":107,"caracterupper":108,"caracterlength":109,"caracterporcion":110,"caracterposicion":111,"Rif":112,"ELSEIFINSTSS":113,"ELSEIFINST":114,"ELSEFINAL":115,"Relse":116,"Rswitch":117,"LISTACASE":118,"DEFAULTINST":119,"CASE":120,"Rcase":121,"Rbreak":122,"Rdefault":123,"Rwhile":124,"Rdo":125,"Rcontinue":126,"Rfor":127,"FOROPCIONES":128,"Rin":129,"ACTUALIZACION":130,"++":131,"--":132,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:";",27:"id",28:"=",32:",",33:"[",34:"]",37:"retorno",38:"(",40:")",43:"tint",44:"tdouble",45:"tboolean",46:"tstring",47:"tchar",48:"tvoid",49:"{",50:"}",51:"println",53:"print",54:"+",55:"-",56:"*",57:"/",58:"%",59:"pow",60:"sqrt",61:"sin",62:"cos",63:"tan",64:">=",65:"<=",66:"!=",67:"==",68:">",69:"<",70:"||",71:"&&",72:"!",73:"&",74:"^",75:"?",76:":",77:"entero",78:"double",79:"texto",80:"caracter",81:"nulo",82:"verdadero",83:"falso",84:"tipode",101:"Rbegin",102:"Rend",103:".",104:"parse",105:"ToInt",106:"ToDouble",107:"caracterlower",108:"caracterupper",109:"caracterlength",110:"caracterporcion",111:"caracterposicion",112:"Rif",116:"Relse",117:"Rswitch",121:"Rcase",122:"Rbreak",123:"Rdefault",124:"Rwhile",125:"Rdo",126:"Rcontinue",127:"Rfor",129:"Rin",131:"++",132:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[11,2],[11,1],[12,1],[12,1],[12,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,1],[12,1],[12,1],[12,1],[8,4],[9,3],[9,5],[31,3],[31,1],[10,7],[35,3],[36,3],[36,3],[36,1],[36,1],[17,3],[17,2],[7,6],[7,5],[39,3],[39,1],[42,2],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[41,3],[13,5],[14,5],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,6],[29,4],[29,4],[29,4],[29,4],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,3],[29,3],[29,5],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,4],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[96,2],[97,2],[97,3],[97,5],[98,3],[99,1],[99,1],[100,1],[100,1],[15,3],[15,4],[52,3],[52,1],[85,6],[86,6],[87,6],[88,4],[90,4],[89,4],[91,5],[92,5],[93,5],[94,8],[95,6],[18,5],[18,5],[18,6],[113,2],[113,2],[113,1],[113,1],[115,2],[114,6],[19,8],[118,2],[118,1],[120,4],[20,2],[119,3],[119,0],[21,5],[22,7],[25,2],[26,8],[26,5],[128,1],[128,1],[130,1],[130,1],[23,2],[24,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
		
	return new Raiz($$[$0-1].linea, $$[$0-1].columna, $$[$0-1]); 

break;
case 2: case 8:
 
				  	this.$ = $$[$0-1]; 
					this.$.registrarInstruccion($$[$0]);
				
break;
case 3:
 
					this.$ = new Bloque(_$[$0].first_line-1,_$[$0].first_column-1); 
					if($$[$0]!=null){this.$.registrarInstruccion($$[$0]);} // Si es nulo, viene de un error manejado en otras producciones.
				
break;
case 4: case 10: case 11:
 this.$ = $$[$0];
break;
case 5: case 6: case 7: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 24:
this.$ = $$[$0];
break;
case 9:
 
							this.$ = new Bloque(_$[$0].first_line-1,_$[$0].first_column-1); 
							if($$[$0]!=null){this.$.registrarInstruccion($$[$0]);} // Si es nulo, viene de un error manejado en otras producciones.
						  
break;
case 12: case 21: case 22:
this.$ =$$[$0-1];
break;
case 23: case 100: case 101: case 102:
this.$ =$$[$0];
break;
case 25: case 148: case 149: case 150: case 151:
this.$=$$[$0];
break;
case 26:
 	
						Utils.registrarErrorSintactico(_$[$0].first_line-1,_$[$0].first_column-1, $$[$0], $$[$0]);
						this.$ = null;						
					
break;
case 27:
 this.$ = new Asignacion(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-3],$$[$0-1]); 
break;
case 28:
 this.$ = new Declaracion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0-1],null);
break;
case 29:
 this.$ = new Declaracion(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4],$$[$0-3],$$[$0-1]);
break;
case 30:
this.$  =$$[$0-2]; this.$.push($$[$0]);
break;
case 31:
 this.$ = new Array; this.$.push($$[$0]); 
break;
case 32:
this.$ = new DeclaracionArreglo(_$[$0-6].first_line-1,_$[$0-6].first_column-1,$$[$0-6],$$[$0-3],$$[$0-1]);
break;
case 33:
 this.$ =$$[$0-1];
break;
case 34: case 35: case 114:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 36: case 37: case 115:
this.$= new Array; this.$.push($$[$0]);
break;
case 38:
 this.$= new Retorno(_$[$0-2].first_line-1,_$[$0-2].first_column-1, $$[$0-1]);
break;
case 39:
 this.$= new Retorno(_$[$0-1].first_line-1,_$[$0-1].first_column-1, null);
break;
case 40:
 this.$ = new Funcion(_$[$0-5].first_line-1,_$[$0-5].first_column-1, $$[$0-5], $$[$0-4], $$[$0-2],$$[$0]);
break;
case 41:
 this.$ = new Funcion(_$[$0-4].first_line-1,_$[$0-4].first_column-1, $$[$0-4], $$[$0-3], new Array,$$[$0]);
break;
case 42:
this.$ =$$[$0-2]; this.$.push($$[$0]);
break;
case 43: case 138:
this.$ = new Array; this.$.push($$[$0]);
break;
case 44:
 this.$ = new Parametro(_$[$0-1].first_line-1,_$[$0-1].first_column-1, $$[$0-1], $$[$0]);
break;
case 45:
 this.$ = new Tipo(TipoPrimitivo.INT);
break;
case 46:
 this.$ = new Tipo(TipoPrimitivo.DOUBLE);
break;
case 47:
 this.$ = new Tipo(TipoPrimitivo.BOOL);
break;
case 48:
 this.$ = new Tipo(TipoPrimitivo.STRING);
break;
case 49:
 this.$ = new Tipo(TipoPrimitivo.CHAR);
break;
case 50:
this.$ = new Tipo(TipoPrimitivo.STRUCT, $$[$0]);
break;
case 51:
 this.$ = new Tipo(TipoPrimitivo.VOID);
break;
case 52:
this.$ = $$[$0-1]; 
break;
case 53:
				
			var nodo_concatenar = null;
			if($$[$0-2].length== 1)
			{
				nodo_concatenar = $$[$0-2][0];
			}				
			else
			{
				var nodoTmp = $$[$0-2][0]; // primer expresion
				var i = 1;
				for( i=1; i<$$[$0-2].length; i++)
				{
					var nodo = $$[$0-2][i];
					var nodoTmp = new Concatenar(nodoTmp.linea, nodoTmp.columna, nodoTmp, nodo);					
				}											
				nodo_concatenar = nodoTmp;
			}		
			this.$ = new Println(_$[$0-4].first_line-1,_$[$0-4].first_column-1, nodo_concatenar);						
		
break;
case 54:

			var nodo_concatenar = null;
			if($$[$0-2].length== 1)
			{
				nodo_concatenar = $$[$0-2][0];
			}				
			else
			{
				var nodoTmp = $$[$0-2][0]; // primer expresion
				var i = 1;
				for( i=1; i<$$[$0-2].length; i++)
				{
					var nodo = $$[$0-2][i];
					var nodoTmp = new Concatenar(nodoTmp.linea, nodoTmp.columna, nodoTmp, nodo);					
				}											
				nodo_concatenar = nodoTmp;
			}		
			this.$ = new Print(_$[$0-4].first_line-1,_$[$0-4].first_column-1, nodo_concatenar);			
		
break;
case 55:

		this.$ = $$[$0-1];		
	
break;
case 56:

		this.$ = new Suma(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);	
	
break;
case 57:

		this.$ = new Resta(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 58:

		this.$ = new Multiplicacion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 59:

		this.$ = new Division(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 60:

		this.$ = new Modulo(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 61:

		this.$ = new Potencia(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-3], $$[$0-1]);
	
break;
case 62:

		this.$ = new RaizCuadrada(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 63:

		this.$ = new Seno(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 64:

		this.$ = new Coseno(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 65:

		this.$ = new Tangente(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 66:

		this.$ = new Menos(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0]);
	
break;
case 67:

		this.$ = new MayorIgual(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 68:

		this.$ = new MenorIgual(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 69:

		this.$ = new Diferenciacion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 70:

		this.$ = new Igualdad(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 71:

		this.$ = new MayorQue(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 72:

		this.$ = new MenorQue(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 73:

		this.$ = new OrLog(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 74:

		this.$ = new AndLog(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 75:

		this.$ = new NotLog(_$[$0].first_line,_$[$0].first_column,$$[$0]);
	
break;
case 76:

		this.$ = new Concatenar(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 77:

		this.$ = new PotenciaString(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 78:

		this.$ = new Ternario(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4],$$[$0-2], $$[$0]);
	
break;
case 79:

		this.$ = new Entero(_$[$0].first_line-1,_$[$0].first_column-1, parseInt($$[$0]));
	
break;
case 80:

		this.$ = new Double(_$[$0].first_line-1,_$[$0].first_column-1, parseFloat($$[$0]));
	
break;
case 81:

		this.$ = new ExpVariable(_$[$0].first_line-1,_$[$0].first_column-1,$$[$0]);
	
break;
case 82:

		this.$ = new ExpString(_$[$0].first_line-1,_$[$0].first_column-1,$$[$0].substring(1,$$[$0].length-1));
		
	
break;
case 83:

		this.$ = new Caracter(_$[$0].first_line,_$[$0].first_column,$$[$0].substring(1,$$[$0].length-1));
	
break;
case 84:

		this.$ = new Nulo(_$[$0].first_line-1,_$[$0].first_column-1);
	
break;
case 85:

		this.$ = new ExpBooleana(_$[$0].first_line-1,_$[$0].first_column-1, true);
	
break;
case 86:

		this.$ = new ExpBooleana(_$[$0].first_line-1,_$[$0].first_column-1, false);
	
break;
case 87:

		this.$ = new TipoDe(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 108: case 110: case 132: case 133:
this.$= $$[$0];
break;
case 103:
this.$= new AccesoArreglo(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]),$$[$0]);
break;
case 104:
this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 105: case 107:
this.$ = new Array; this.$.push($$[$0-1]);
break;
case 106:
 this.$= new Limites(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-3],$$[$0-1]);
break;
case 109: case 111:
this.$=null;
break;
case 112:
 this.$ = new Llamada(_$[$0-2].first_line-1,_$[$0-2].first_column-1, $$[$0-2], new Array);
break;
case 113:
 this.$ = new Llamada(_$[$0-3].first_line-1,_$[$0-3].first_column-1, $$[$0-3], $$[$0-1]);
break;
case 116:
 this.$ = new ParseBool(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 117:
 this.$ = new ParseDouble(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 118:
 this.$ = new ParseInt(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 119:
 this.$ = new NativaToInt(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 120:
 this.$ = new NativaToDouble(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 121:
 this.$ = new NativaToString(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 122:
 this.$ = new LowerCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 123:
 this.$ = new UpperCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 124:
 this.$ = new LengthCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 125:
 this.$ = new PorcionCadena(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-7],$$[$0-3],$$[$0-1]);
break;
case 126:
 this.$ = new PosicionCadena(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-5],$$[$0-1]);
break;
case 127:
this.$= new Si(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-2],$$[$0], null);
break;
case 128:
 
									var BloqueInstruccion = new Bloque(_$[$0-4].first_line-1,_$[$0-4].first_column-1); 
									BloqueInstruccion.registrarInstruccion($$[$0]);
									this.$= new Si(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-2],BloqueInstruccion, null);
								
break;
case 129:
 
									this.$= new Si(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-3],$$[$0-1], $$[$0]);
								
break;
case 130: case 131:
this.$= $$[$0-1];  this.$.sinosi = $$[$0];
break;
case 134:
this.$= new Si(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpBooleana(_$[$0-1].first_line-1,_$[$0-1].first_column-1,true),$$[$0],null); 
break;
case 135:
this.$= new Si(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-2],$$[$0], null);
break;
case 136:
 this.$= new SwitchInst(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-5],$$[$0-2],$$[$0-1]);
break;
case 137:
this.$ =$$[$0-1]; this.$.push($$[$0]);
break;
case 139:
 this.$= new CaseInst(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-2],$$[$0]);
break;
case 140:
 this.$= new BreakInst(_$[$0-1].first_line-1,_$[$0-1].first_column-1);
break;
case 141:
 this.$= new DefaultInst(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0]);
break;
case 143:
 this.$= new WhileInst(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-2],$$[$0]);
break;
case 144:
 this.$= new DoWhileInst(_$[$0-6].first_line-1,_$[$0-6].first_column-1,$$[$0-5],$$[$0-2]);
break;
case 145:
 this.$= new ContinueInst(_$[$0-1].first_line-1,_$[$0-1].first_column-1);
break;
case 146:
 this.$= new ForInst(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 147:
 this.$= new For2Inst(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-3],$$[$0-1],$$[$0]);
break;
case 152:
this.$= new Aumento(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]));
break;
case 153:
this.$= new Decremento(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]));
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,27:$V0,30:8,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6},{1:[3]},{5:[1,16],6:17,7:4,8:5,9:6,10:7,27:$V0,30:8,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),o($V7,[2,7]),{27:[1,18],31:19,33:$V8},o($V9,$Va,{28:$Vb}),o($V9,[2,45]),o($V9,[2,46]),o($V9,[2,47]),o($V9,[2,48]),o($V9,[2,49]),o($V9,[2,51]),{1:[2,1]},o($V7,[2,2]),o($Vc,$Vd,{38:[1,22]}),{16:[1,23],28:[1,24],32:[1,25]},{34:[1,26]},{15:51,23:58,24:59,27:$Ve,29:27,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{27:$VB,30:69,39:66,40:[1,67],42:68,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6},o($VC,[2,28]),{15:51,23:58,24:59,27:$Ve,29:71,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{27:[1,72]},{27:[1,73]},{16:[1,74],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{15:51,23:58,24:59,27:$Ve,29:92,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{38:[1,93]},{38:[1,94]},{38:[1,95]},{38:[1,96]},{38:[1,97]},{15:51,23:58,24:59,27:$Ve,29:98,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:99,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},o($VU,[2,79]),o($VU,[2,80]),o($VU,[2,81],{97:101,33:[1,104],38:$VV,131:$VW,132:$VX}),o($VU,[2,82]),o($VU,[2,83]),o($VU,[2,84]),o($VU,[2,85]),o($VU,[2,86]),{38:[1,105]},o($VU,[2,88]),o($VU,[2,89]),o($VU,[2,90]),o($VU,[2,91]),o($VU,[2,92]),o($VU,[2,93]),o($VU,[2,94]),o($VU,[2,95]),o($VU,[2,96]),o($VU,[2,97]),o($VU,[2,98]),o($VU,[2,99]),o($VU,[2,100]),o($VU,[2,101]),o($VU,[2,102]),{103:[1,106]},{103:[1,107]},{103:[1,108]},{38:[1,109]},{38:[1,110]},{38:[1,111]},{32:[1,113],40:[1,112]},{41:114,49:$VY},o($VZ,[2,43]),{27:[1,116]},{27:$Va},{16:[1,117],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},o($Vc,[2,30]),{28:[1,118]},o($VC,[2,27]),{15:51,23:58,24:59,27:$Ve,29:119,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:120,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:121,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:122,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:123,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:124,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:125,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:126,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:127,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:128,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:129,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:130,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:131,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:132,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:133,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:134,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{107:[1,135],108:[1,136],109:[1,137],110:[1,138],111:[1,139]},{40:[1,140],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{15:51,23:58,24:59,27:$Ve,29:141,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:142,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:143,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:144,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:145,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},o($V_,[2,66],{103:$VT}),o($V_,[2,75],{103:$VT}),{15:51,23:58,24:59,27:$Ve,29:148,38:$Vf,40:[1,146],43:$Vg,44:$Vh,45:$Vi,46:$Vj,52:147,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},o($VU,[2,103],{98:149,33:[1,150]}),o($VU,[2,152]),o($VU,[2,153]),{15:51,23:58,24:59,27:$Ve,29:151,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,99:152,101:[1,153],105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:154,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{104:[1,155]},{104:[1,156]},{104:[1,157]},{15:51,23:58,24:59,27:$Ve,29:158,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:159,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:160,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{41:161,49:$VY},{27:$VB,30:69,42:162,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6},o($V7,[2,41]),{2:$V$,8:168,9:169,10:179,11:163,12:164,13:165,14:166,15:167,17:170,18:171,19:172,20:173,21:174,22:175,23:176,24:177,25:178,26:180,27:$V01,30:185,37:$V11,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,51:$V21,53:$V31,112:$V41,117:$V51,122:$V61,124:$V71,125:$V81,126:$V91,127:$Va1},o($VZ,[2,44]),o($VC,[2,29]),{33:$Vb1,35:194},o($Vc1,[2,56],{56:$VF,57:$VG,58:$VH,74:$VR,103:$VT}),o($Vc1,[2,57],{56:$VF,57:$VG,58:$VH,74:$VR,103:$VT}),o($Vd1,[2,58],{74:$VR,103:$VT}),o($Vd1,[2,59],{74:$VR,103:$VT}),o($Vd1,[2,60],{74:$VR,103:$VT}),o($Ve1,[2,67],{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,73:$VQ,74:$VR,103:$VT}),o($Ve1,[2,68],{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,73:$VQ,74:$VR,103:$VT}),o($Ve1,[2,69],{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,73:$VQ,74:$VR,103:$VT}),o($Ve1,[2,70],{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,73:$VQ,74:$VR,103:$VT}),o($Ve1,[2,71],{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,73:$VQ,74:$VR,103:$VT}),o($Ve1,[2,72],{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,73:$VQ,74:$VR,103:$VT}),o($Vf1,[2,73],{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,73:$VQ,74:$VR,103:$VT}),o($Vf1,[2,74],{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,73:$VQ,74:$VR,103:$VT}),o($Vc1,[2,76],{56:$VF,57:$VG,58:$VH,74:$VR,103:$VT}),o($V_,[2,77],{103:$VT}),{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,76:[1,196],103:$VT},{38:[1,197]},{38:[1,198]},{38:[1,199]},{38:[1,200]},{38:[1,201]},o($VU,[2,55]),{32:[1,202],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{40:[1,203],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{40:[1,204],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{40:[1,205],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{40:[1,206],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},o($VU,[2,112]),{32:$Vg1,40:[1,207]},o($VZ,[2,115],{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT}),o($Vh1,[2,104]),{15:51,23:58,24:59,27:$Ve,29:209,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{34:[1,210],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,76:[2,108],103:$VT},{76:[1,211]},{76:[2,109]},{40:[1,212],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{38:[1,213]},{38:[1,214]},{38:[1,215]},{40:[1,216],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{40:[1,217],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{40:[1,218],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},o($V7,[2,40]),o($VZ,[2,42]),{2:$V$,8:168,9:169,10:179,12:220,13:165,14:166,15:167,17:170,18:171,19:172,20:173,21:174,22:175,23:176,24:177,25:178,26:180,27:$V01,30:185,37:$V11,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,50:[1,219],51:$V21,53:$V31,112:$V41,117:$V51,122:$V61,124:$V71,125:$V81,126:$V91,127:$Va1},o($Vi1,[2,9]),o($Vi1,[2,10]),o($Vi1,[2,11]),{16:[1,221]},o($Vi1,[2,13]),o($Vi1,[2,14]),o($Vi1,[2,15]),o($Vi1,[2,16]),o($Vi1,[2,17]),o($Vi1,[2,18]),o($Vi1,[2,19]),o($Vi1,[2,20]),{16:[1,222]},{16:[1,223]},o($Vi1,[2,23]),o($Vi1,[2,24]),o($Vi1,[2,25]),o($Vi1,[2,26]),{38:[1,224]},{38:[1,225]},o($V9,$Va,{28:$Vb,38:$VV,131:$VW,132:$VX}),{27:$Vj1,31:19,33:$V8},{15:51,16:[1,228],23:58,24:59,27:$Ve,29:227,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{38:[1,229]},{38:[1,230]},{16:[1,231]},{38:[1,232]},{41:233,49:$VY},{16:[1,234]},{27:[1,236],38:[1,235]},{16:[1,237]},{15:51,23:58,24:59,27:$Ve,29:239,33:$Vb1,35:240,36:238,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:241,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{40:[1,242]},{40:[1,243]},{40:[1,244]},{15:51,23:58,24:59,27:$Ve,29:245,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:246,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:247,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},o($VU,[2,62]),o($VU,[2,63]),o($VU,[2,64]),o($VU,[2,65]),o($VU,[2,113]),{15:51,23:58,24:59,27:$Ve,29:248,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{34:[1,249],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},o($Vh1,[2,105]),{15:51,23:58,24:59,27:$Ve,29:251,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,100:250,102:[1,252],105:$Vz,106:$VA},o($VU,[2,87]),{15:51,23:58,24:59,27:$Ve,29:253,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:254,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:255,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},o($VU,[2,119]),o($VU,[2,121]),o($VU,[2,120]),o([2,5,27,37,43,44,45,46,47,48,50,51,53,112,116,117,121,122,123,124,125,126,127],[2,52]),o($Vi1,[2,8]),o($Vi1,[2,12]),o($Vi1,[2,21]),o($Vi1,[2,22]),{15:51,23:58,24:59,27:$Ve,29:148,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,52:256,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:148,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,52:257,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},o($Vc,$Vd),{16:[1,258],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},o($Vi1,[2,39]),{15:51,23:58,24:59,27:$Ve,29:259,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:260,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},o($Vi1,[2,140]),{15:51,23:58,24:59,27:$Ve,29:261,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{124:[1,262]},o($Vi1,[2,145]),{8:264,9:265,27:$V0,30:266,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,128:263},{129:[1,267]},o([2,5,27,37,43,44,45,46,47,48,50,51,53,112,117,121,122,123,124,125,126,127],[2,32]),{32:[1,269],34:[1,268]},o($Vk1,[2,36],{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT}),o($Vk1,[2,37]),o([16,32,34,40,49,75,76],[2,78],{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,103:$VT}),o($VU,[2,122]),o($VU,[2,123]),o($VU,[2,124]),{32:[1,270],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{40:[1,271],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{40:[1,272],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},o($VZ,[2,114],{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT}),o($Vh1,[2,107]),{34:[1,273]},{34:[2,110],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{34:[2,111]},{40:[1,274],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{40:[1,275],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{40:[1,276],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{32:$Vg1,40:[1,277]},{32:$Vg1,40:[1,278]},o($Vi1,[2,38]),{40:[1,279],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{40:[1,280],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{40:[1,281],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{38:[1,282]},{15:51,23:58,24:59,27:$Ve,29:283,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},o($Vl1,[2,148]),o($Vl1,[2,149]),{27:$Vj1,31:19},{15:51,23:58,24:59,27:$Ve,29:284,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},o([16,32,34],[2,33]),{15:51,23:58,24:59,27:$Ve,29:285,33:$Vb1,35:286,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{15:51,23:58,24:59,27:$Ve,29:287,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},o($VU,[2,126]),o($VU,[2,61]),o($Vh1,[2,106]),o($VU,[2,116]),o($VU,[2,117]),o($VU,[2,118]),{16:[1,288]},{16:[1,289]},{2:$V$,8:168,9:169,10:179,12:291,13:165,14:166,15:167,17:170,18:171,19:172,20:173,21:174,22:175,23:176,24:177,25:178,26:180,27:$V01,30:185,37:$V11,41:290,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,49:$VY,51:$V21,53:$V31,112:$V41,117:$V51,122:$V61,124:$V71,125:$V81,126:$V91,127:$Va1},{49:[1,292]},{41:293,49:$VY},{15:51,23:58,24:59,27:$Ve,29:294,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{16:[1,295],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{41:296,49:$VY,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},o($Vk1,[2,34],{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT}),o($Vk1,[2,35]),{40:[1,297],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},o($Vi1,[2,53]),o($Vi1,[2,54]),o($Vi1,[2,127],{113:298,114:299,115:300,116:$Vm1}),o($Vi1,[2,128]),{118:302,120:303,121:$Vn1},o($Vi1,[2,143]),{40:[1,305],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{15:51,23:58,24:59,27:$Ve,29:306,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},o($Vi1,[2,147]),o($VU,[2,125]),o($Vi1,[2,129]),o($Vi1,[2,132],{114:299,115:300,113:307,116:$Vm1}),o($Vi1,[2,133],{114:299,115:300,113:308,116:$Vm1}),{41:310,49:$VY,112:[1,309]},{50:[2,142],119:311,120:312,121:$Vn1,123:[1,313]},o($Vo1,[2,138]),{15:51,23:58,24:59,27:$Ve,29:314,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},{16:[1,315]},{40:[1,316],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},o($Vi1,[2,130]),o($Vi1,[2,131]),{38:[1,317]},o($Vp1,[2,134]),{50:[1,318]},o($Vo1,[2,137]),{76:[1,319]},{54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,76:[1,320],103:$VT},o($Vi1,[2,144]),{41:321,49:$VY},{15:51,23:58,24:59,27:$Ve,29:322,38:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,55:$Vk,59:$Vl,60:$Vm,61:$Vn,62:$Vo,63:$Vp,72:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:45,86:46,87:47,88:48,89:49,90:50,91:52,92:53,93:54,94:55,95:56,96:57,105:$Vz,106:$VA},o($Vi1,[2,136]),{2:$V$,8:168,9:169,10:179,11:323,12:164,13:165,14:166,15:167,17:170,18:171,19:172,20:173,21:174,22:175,23:176,24:177,25:178,26:180,27:$V01,30:185,37:$V11,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,51:$V21,53:$V31,112:$V41,117:$V51,122:$V61,124:$V71,125:$V81,126:$V91,127:$Va1},{2:$V$,8:168,9:169,10:179,11:324,12:164,13:165,14:166,15:167,17:170,18:171,19:172,20:173,21:174,22:175,23:176,24:177,25:178,26:180,27:$V01,30:185,37:$V11,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,51:$V21,53:$V31,112:$V41,117:$V51,122:$V61,124:$V71,125:$V81,126:$V91,127:$Va1},o($Vi1,[2,146]),{40:[1,325],54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VQ,74:$VR,75:$VS,103:$VT},{2:$V$,8:168,9:169,10:179,12:220,13:165,14:166,15:167,17:170,18:171,19:172,20:173,21:174,22:175,23:176,24:177,25:178,26:180,27:$V01,30:185,37:$V11,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,50:[2,141],51:$V21,53:$V31,112:$V41,117:$V51,122:$V61,124:$V71,125:$V81,126:$V91,127:$Va1},o($Vo1,[2,139],{13:165,14:166,15:167,8:168,9:169,17:170,18:171,19:172,20:173,21:174,22:175,23:176,24:177,25:178,10:179,26:180,30:185,12:220,2:$V$,27:$V01,37:$V11,43:$V1,44:$V2,45:$V3,46:$V4,47:$V5,48:$V6,51:$V21,53:$V31,112:$V41,117:$V51,122:$V61,124:$V71,125:$V81,126:$V91,127:$Va1}),{41:326,49:$VY},o($Vp1,[2,135])],
defaultActions: {16:[2,1],70:[2,50],153:[2,109],252:[2,111]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var debugMode = false;
	function debugPrint(valor)
	{
		if(debugMode)
		{
			debugPrint(valor);
		}
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitve":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:return;
break;
case 4:return;
break;
case 5:return;
break;
case 6:return 78
break;
case 7:return 77
break;
case 8:return 79	  
break;
case 9:return 80
break;
case 10: debugPrint('>=');return 64; 
break;
case 11: debugPrint('<=');return 65; 
break;
case 12: debugPrint('==');return 67; 
break;
case 13: debugPrint('!=');return 66; 
break;
case 14: debugPrint('>');return 68; 
break;
case 15: debugPrint('<');return 69; 
break;
case 16: debugPrint('||');return 70; 
break;
case 17: debugPrint('?');return 75; 
break;
case 18: debugPrint('&&');return 71; 
break;
case 19: debugPrint('&');return 73; 
break;
case 20: debugPrint('!');return 72; 
break;
case 21: debugPrint('*');return 56; 
break;
case 22: debugPrint('/');return 57; 
break;
case 23: debugPrint('++');return 131; 
break;
case 24: debugPrint('--');return 132; 
break;
case 25: debugPrint('-');return 55; 
break;
case 26: debugPrint('+');return 54; 
break;
case 27: debugPrint('%');return 58; 
break;
case 28: debugPrint('^');return 74; 
break;
case 29: debugPrint('=');return 28; 
break;
case 30: debugPrint('(');return 38; 
break;
case 31: debugPrint(')');return 40; 
break;
case 32: debugPrint('{');return 49; 
break;
case 33: debugPrint('}');return 50; 
break;
case 34: debugPrint('[');return 33; 
break;
case 35: debugPrint(']');return 34; 
break;
case 36: debugPrint(',');return 32; 
break;
case 37: debugPrint('.');return 103; 
break;
case 38: debugPrint(':');return 76; 
break;
case 39: debugPrint(';');return 16; 
break;
case 40: debugPrint(yy_.yytext);return 81; 
break;
case 41: debugPrint(yy_.yytext);return 82; 
break;
case 42: debugPrint(yy_.yytext);return 83; 
break;
case 43: debugPrint(yy_.yytext);return 51; 
break;
case 44: debugPrint(yy_.yytext);return 53; 
break;
case 45: debugPrint(yy_.yytext);return 84; 
break;
case 46: debugPrint(yy_.yytext);return 'tnull'; 
break;
case 47: debugPrint(yy_.yytext);return 43; 
break;
case 48: debugPrint(yy_.yytext);return 44; 
break;
case 49: debugPrint(yy_.yytext);return 45; 
break;
case 50: debugPrint(yy_.yytext);return 47; 
break;
case 51: debugPrint(yy_.yytext);return 46; 
break;
case 52: debugPrint(yy_.yytext);return 48; 
break;
case 53: debugPrint(yy_.yytext);return 37; 
break;
case 54: debugPrint(yy_.yytext);return 59; 
break;
case 55: debugPrint(yy_.yytext);return 60; 
break;
case 56: debugPrint(yy_.yytext);return 61; 
break;
case 57: debugPrint(yy_.yytext);return 62; 
break;
case 58: debugPrint(yy_.yytext);return 63; 
break;
case 59: debugPrint(yy_.yytext);return 111; 
break;
case 60: debugPrint(yy_.yytext);return 110; 
break;
case 61: debugPrint(yy_.yytext);return 109; 
break;
case 62: debugPrint(yy_.yytext);return 108; 
break;
case 63: debugPrint(yy_.yytext);return 107; 
break;
case 64: debugPrint(yy_.yytext);return 'ToString'; 
break;
case 65: debugPrint(yy_.yytext);return 105; 
break;
case 66: debugPrint(yy_.yytext);return 106; 
break;
case 67: debugPrint(yy_.yytext);return 104; 
break;
case 68: debugPrint(yy_.yytext);return 117; 
break;
case 69: debugPrint(yy_.yytext);return 121; 
break;
case 70: debugPrint(yy_.yytext);return 122; 
break;
case 71: debugPrint(yy_.yytext);return 123; 
break;
case 72: debugPrint(yy_.yytext);return 124; 
break;
case 73: debugPrint(yy_.yytext);return 125; 
break;
case 74: debugPrint(yy_.yytext);return 112; 
break;
case 75: debugPrint(yy_.yytext);return 116; 
break;
case 76: debugPrint(yy_.yytext);return 127; 
break;
case 77: debugPrint(yy_.yytext);return 129; 
break;
case 78: debugPrint(yy_.yytext);return 126; 
break;
case 79: debugPrint(yy_.yytext);return 101; 
break;
case 80: debugPrint(yy_.yytext);return 102; 
break;
case 81: debugPrint(yy_.yytext); return 27; 
break;
case 82:return 5
break;
case 83:  Utils.registrarErrorLexico(yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext, 'Caracter no válido.'); return 'INVALIDO' 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:\/\*[^'*']*\*\/)/,/^(?:\/\/[^\r\n]*[^\r\n])/,/^(?:\/\*[^"*"]\*\/)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:"(\\.|[^"])*")/,/^(?:'(\\.|[^'])')/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\^)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:typeof\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:toString\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:parse\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:continue\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:([a-zA-Z]|_|\$)([a-zA-Z]|[0-9]|_|\$)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}