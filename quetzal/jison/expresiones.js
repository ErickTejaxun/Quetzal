/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var expresiones = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,2],$V1=[1,8],$V2=[1,3],$V3=[1,4],$V4=[1,5],$V5=[1,6],$V6=[1,7],$V7=[1,9],$V8=[1,10],$V9=[1,11],$Va=[1,12],$Vb=[1,13],$Vc=[1,14],$Vd=[1,15],$Ve=[1,16],$Vf=[1,17],$Vg=[1,18],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,39],$Vm=[1,38],$Vn=[1,40],$Vo=[1,41],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,45],$Vt=[1,46],$Vu=[1,47],$Vv=[1,48],$Vw=[1,49],$Vx=[1,50],$Vy=[1,51],$Vz=[1,52],$VA=[1,53],$VB=[1,54],$VC=[1,55],$VD=[1,56],$VE=[1,5,6,7,8,9,10,12,17,18,19,20,21,22,23,24,26,27,28,29,57,64],$VF=[1,5,6,7,8,9,10,12,17,18,19,20,21,22,23,24,26,27,28,29,57],$VG=[1,5,6,7,12,17,18,19,20,21,22,23,24,26,28,29,57],$VH=[1,5,6,7,8,9,10,12,17,18,19,20,21,22,23,24,26,28,29,57],$VI=[1,5,12,17,18,19,20,21,22,23,24,28,29,57],$VJ=[1,5,12,23,24,28,29,57],$VK=[5,12],$VL=[1,5,6,7,8,9,10,12,17,18,19,20,21,22,23,24,26,27,28,29,56,57,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"E":3,"(":4,")":5,"+":6,"-":7,"*":8,"/":9,"%":10,"pow":11,",":12,"sqrt":13,"sin":14,"cos":15,"tan":16,">=":17,"<=":18,"!=":19,"==":20,">":21,"<":22,"||":23,"&&":24,"!":25,"&":26,"^":27,"?":28,":":29,"entero":30,"double":31,"id":32,"texto":33,"caracter":34,"nulo":35,"verdadero":36,"falso":37,"tipode":38,"PARSEBOOL":39,"PARSEDOUBLE":40,"PARSEINT":41,"NATIVATOINT":42,"NATIVATOSTRING":43,"NATIVATODOUBLE":44,"LLAMADA":45,"LOWERCADENA":46,"UPPERCADENA":47,"LENGTHCADENA":48,"PORCIONCADENA":49,"POSICIONCADENA":50,"ACCESOARREGLO":51,"AUMENTO":52,"DECREMENTO":53,"LINDICES":54,"INDICE":55,"[":56,"]":57,"INICIOA":58,"FINA":59,"Rbegin":60,"Rend":61,"LExpr":62,"tboolean":63,".":64,"parse":65,"tdouble":66,"tint":67,"ToInt":68,"ToDouble":69,"tstring":70,"caracterlower":71,"caracterupper":72,"caracterlength":73,"caracterporcion":74,"caracterposicion":75,"ACTUALIZACION":76,"++":77,"--":78,"$accept":0,"$end":1},
terminals_: {2:"error",4:"(",5:")",6:"+",7:"-",8:"*",9:"/",10:"%",11:"pow",12:",",13:"sqrt",14:"sin",15:"cos",16:"tan",17:">=",18:"<=",19:"!=",20:"==",21:">",22:"<",23:"||",24:"&&",25:"!",26:"&",27:"^",28:"?",29:":",30:"entero",31:"double",32:"id",33:"texto",34:"caracter",35:"nulo",36:"verdadero",37:"falso",38:"tipode",56:"[",57:"]",60:"Rbegin",61:"Rend",63:"tboolean",64:".",65:"parse",66:"tdouble",67:"tint",68:"ToInt",69:"ToDouble",70:"tstring",71:"caracterlower",72:"caracterupper",73:"caracterlength",74:"caracterporcion",75:"caracterposicion",77:"++",78:"--"},
productions_: [0,[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,6],[3,4],[3,4],[3,4],[3,4],[3,2],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,2],[3,3],[3,3],[3,5],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,4],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[51,2],[54,2],[54,3],[54,5],[55,3],[58,1],[58,1],[59,1],[59,1],[45,3],[45,4],[62,3],[62,1],[39,6],[40,6],[41,6],[42,4],[44,4],[43,4],[46,5],[47,5],[48,5],[49,8],[50,6],[76,1],[76,1],[52,2],[53,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		this.$ = $$[$0-1];		
	
break;
case 2:

		this.$ = new Suma(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);	
	
break;
case 3:

		this.$ = new Resta(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 4:

		this.$ = new Multiplicacion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 5:

		this.$ = new Division(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 6:

		this.$ = new Modulo(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 7:

		this.$ = new Potencia(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-3], $$[$0-1]);
	
break;
case 8:

		this.$ = new RaizCuadrada(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 9:

		this.$ = new Seno(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 10:

		this.$ = new Coseno(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 11:

		this.$ = new Tangente(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 12:

		this.$ = new Menos(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0]);
	
break;
case 13:

		this.$ = new MayorIgual(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 14:

		this.$ = new MenorIgual(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 15:

		this.$ = new Diferenciacion(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 16:

		this.$ = new Igualdad(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 17:

		this.$ = new MayorQue(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 18:

		this.$ = new MenorQue(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 19:

		this.$ = new OrLog(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 20:

		this.$ = new AndLog(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 21:

		this.$ = new NotLog(_$[$0].first_line,_$[$0].first_column,$$[$0]);
	
break;
case 22:

		this.$ = new Concatenar(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 23:

		this.$ = new PotenciaString(_$[$0-2].first_line-1,_$[$0-2].first_column-1,$$[$0-2],$$[$0]);
	
break;
case 24:

		this.$ = new Ternario(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4],$$[$0-2], $$[$0]);
	
break;
case 25:

		this.$ = new Entero(_$[$0].first_line-1,_$[$0].first_column-1, parseInt($$[$0]));
	
break;
case 26:

		this.$ = new Double(_$[$0].first_line-1,_$[$0].first_column-1, parseFloat($$[$0]));
	
break;
case 27:

		this.$ = new ExpVariable(_$[$0].first_line-1,_$[$0].first_column-1,$$[$0]);
	
break;
case 28:

		this.$ = new ExpString(_$[$0].first_line-1,_$[$0].first_column-1,$$[$0].substring(1,$$[$0].length-1));
		
	
break;
case 29:

		this.$ = new Caracter(_$[$0].first_line,_$[$0].first_column,$$[$0].substring(1,$$[$0].length-1));
	
break;
case 30:

		this.$ = new Nulo(_$[$0].first_line-1,_$[$0].first_column-1);
	
break;
case 31:

		this.$ = new ExpBooleana(_$[$0].first_line-1,_$[$0].first_column-1, true);
	
break;
case 32:

		this.$ = new ExpBooleana(_$[$0].first_line-1,_$[$0].first_column-1, false);
	
break;
case 33:

		this.$ = new TipoDe(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
	
break;
case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 54: case 56:
this.$= $$[$0];
break;
case 46: case 47: case 48:
this.$ =$$[$0];
break;
case 49:
this.$= new AccesoArreglo(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]),$$[$0]);
break;
case 50:
this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 51: case 53:
this.$ = new Array; this.$.push($$[$0-1]);
break;
case 52:
 this.$= new Limites(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-3],$$[$0-1]);
break;
case 55: case 57:
this.$=null;
break;
case 58:
 this.$ = new Llamada(_$[$0-2].first_line-1,_$[$0-2].first_column-1, $$[$0-2], new Array);
break;
case 59:
 this.$ = new Llamada(_$[$0-3].first_line-1,_$[$0-3].first_column-1, $$[$0-3], $$[$0-1]);
break;
case 60:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 61:
this.$= new Array; this.$.push($$[$0]);
break;
case 62:
 this.$ = new ParseBool(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 63:
 this.$ = new ParseDouble(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 64:
 this.$ = new ParseInt(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-1]);
break;
case 65:
 this.$ = new NativaToInt(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 66:
 this.$ = new NativaToDouble(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 67:
 this.$ = new NativaToString(_$[$0-3].first_line-1,_$[$0-3].first_column-1,$$[$0-1]);
break;
case 68:
 this.$ = new LowerCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 69:
 this.$ = new UpperCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 70:
 this.$ = new LengthCadena(_$[$0-4].first_line-1,_$[$0-4].first_column-1,$$[$0-4]);
break;
case 71:
 this.$ = new PorcionCadena(_$[$0-7].first_line-1,_$[$0-7].first_column-1,$$[$0-7],$$[$0-3],$$[$0-1]);
break;
case 72:
 this.$ = new PosicionCadena(_$[$0-5].first_line-1,_$[$0-5].first_column-1,$$[$0-5],$$[$0-1]);
break;
case 73: case 74:
this.$=$$[$0];
break;
case 75:
this.$= new Aumento(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]));
break;
case 76:
this.$= new Decremento(_$[$0-1].first_line-1,_$[$0-1].first_column-1,new ExpVariable(_$[$0-1].first_line-1,_$[$0-1].first_column-1,$$[$0-1]));
break;
}
},
table: [{3:1,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{1:[3],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{3:57,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{4:[1,58]},{4:[1,59]},{4:[1,60]},{4:[1,61]},{4:[1,62]},{3:63,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:64,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VE,[2,25]),o($VE,[2,26]),o($VE,[2,27],{54:66,4:[1,65],56:[1,69],77:[1,67],78:[1,68]}),o($VE,[2,28]),o($VE,[2,29]),o($VE,[2,30]),o($VE,[2,31]),o($VE,[2,32]),{4:[1,70]},o($VE,[2,34]),o($VE,[2,35]),o($VE,[2,36]),o($VE,[2,37]),o($VE,[2,38]),o($VE,[2,39]),o($VE,[2,40]),o($VE,[2,41]),o($VE,[2,42]),o($VE,[2,43]),o($VE,[2,44]),o($VE,[2,45]),o($VE,[2,46]),o($VE,[2,47]),o($VE,[2,48]),{64:[1,71]},{64:[1,72]},{64:[1,73]},{4:[1,74]},{4:[1,75]},{4:[1,76]},{3:77,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:78,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:79,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:80,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:81,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:82,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:83,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:84,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:85,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:86,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:87,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:88,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:89,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:90,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:91,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:92,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{71:[1,93],72:[1,94],73:[1,95],74:[1,96],75:[1,97]},{5:[1,98],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{3:99,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:100,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:101,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:102,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:103,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VF,[2,12],{64:$VD}),o($VF,[2,21],{64:$VD}),{3:106,4:$V0,5:[1,104],7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,62:105,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VE,[2,49],{55:107,56:[1,108]}),o($VE,[2,75]),o($VE,[2,76]),{3:109,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,58:110,60:[1,111],63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:112,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{65:[1,113]},{65:[1,114]},{65:[1,115]},{3:116,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:117,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:118,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VG,[2,2],{8:$Vp,9:$Vq,10:$Vr,27:$VB,64:$VD}),o($VG,[2,3],{8:$Vp,9:$Vq,10:$Vr,27:$VB,64:$VD}),o($VH,[2,4],{27:$VB,64:$VD}),o($VH,[2,5],{27:$VB,64:$VD}),o($VH,[2,6],{27:$VB,64:$VD}),o($VI,[2,13],{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,26:$VA,27:$VB,64:$VD}),o($VI,[2,14],{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,26:$VA,27:$VB,64:$VD}),o($VI,[2,15],{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,26:$VA,27:$VB,64:$VD}),o($VI,[2,16],{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,26:$VA,27:$VB,64:$VD}),o($VI,[2,17],{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,26:$VA,27:$VB,64:$VD}),o($VI,[2,18],{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,26:$VA,27:$VB,64:$VD}),o($VJ,[2,19],{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,26:$VA,27:$VB,64:$VD}),o($VJ,[2,20],{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,26:$VA,27:$VB,64:$VD}),o($VG,[2,22],{8:$Vp,9:$Vq,10:$Vr,27:$VB,64:$VD}),o($VF,[2,23],{64:$VD}),{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,29:[1,119],64:$VD},{4:[1,120]},{4:[1,121]},{4:[1,122]},{4:[1,123]},{4:[1,124]},o($VE,[2,1]),{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,12:[1,125],17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{5:[1,126],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{5:[1,127],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{5:[1,128],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{5:[1,129],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},o($VE,[2,58]),{5:[1,130],12:[1,131]},o($VK,[2,61],{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD}),o($VL,[2,50]),{3:132,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,29:[2,54],57:[1,133],64:$VD},{29:[1,134]},{29:[2,55]},{5:[1,135],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{4:[1,136]},{4:[1,137]},{4:[1,138]},{5:[1,139],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{5:[1,140],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{5:[1,141],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{3:142,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{5:[1,143]},{5:[1,144]},{5:[1,145]},{3:146,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:147,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:148,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VE,[2,8]),o($VE,[2,9]),o($VE,[2,10]),o($VE,[2,11]),o($VE,[2,59]),{3:149,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,57:[1,150],64:$VD},o($VL,[2,51]),{3:152,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,59:151,61:[1,153],63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VE,[2,33]),{3:154,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:155,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{3:156,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VE,[2,65]),o($VE,[2,67]),o($VE,[2,66]),o([1,5,12,28,29,57],[2,24],{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,64:$VD}),o($VE,[2,68]),o($VE,[2,69]),o($VE,[2,70]),{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,12:[1,157],17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{5:[1,158],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{5:[1,159],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},o($VK,[2,60],{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD}),o($VL,[2,53]),{57:[1,160]},{6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,57:[2,56],64:$VD},{57:[2,57]},{5:[1,161],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{5:[1,162],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{5:[1,163],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},{3:164,4:$V0,7:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,35:$Vd,36:$Ve,37:$Vf,38:$Vg,39:19,40:20,41:21,42:22,43:23,44:24,45:25,46:26,47:27,48:28,49:29,50:30,51:31,52:32,53:33,63:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VE,[2,72]),o($VE,[2,7]),o($VL,[2,52]),o($VE,[2,62]),o($VE,[2,63]),o($VE,[2,64]),{5:[1,165],6:$Vn,7:$Vo,8:$Vp,9:$Vq,10:$Vr,17:$Vs,18:$Vt,19:$Vu,20:$Vv,21:$Vw,22:$Vx,23:$Vy,24:$Vz,26:$VA,27:$VB,28:$VC,64:$VD},o($VE,[2,71])],
defaultActions: {111:[2,55],153:[2,57]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var debugMode = false;
	function debugPrint(valor)
	{
		if(debugMode)
		{
			debugPrint(valor);
		}
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitve":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/* skip whitespace */
break;
case 3:return;
break;
case 4:return;
break;
case 5:return;
break;
case 6:return 31
break;
case 7:return 30
break;
case 8:return 33	  
break;
case 9:return 34
break;
case 10: debugPrint('>=');return 17; 
break;
case 11: debugPrint('<=');return 18; 
break;
case 12: debugPrint('==');return 20; 
break;
case 13: debugPrint('!=');return 19; 
break;
case 14: debugPrint('>');return 21; 
break;
case 15: debugPrint('<');return 22; 
break;
case 16: debugPrint('||');return 23; 
break;
case 17: debugPrint('?');return 28; 
break;
case 18: debugPrint('&&');return 24; 
break;
case 19: debugPrint('&');return 26; 
break;
case 20: debugPrint('!');return 25; 
break;
case 21: debugPrint('*');return 8; 
break;
case 22: debugPrint('/');return 9; 
break;
case 23: debugPrint('++');return 77; 
break;
case 24: debugPrint('--');return 78; 
break;
case 25: debugPrint('-');return 7; 
break;
case 26: debugPrint('+');return 6; 
break;
case 27: debugPrint('%');return 10; 
break;
case 28: debugPrint('^');return 27; 
break;
case 29: debugPrint('=');return '='; 
break;
case 30: debugPrint('(');return 4; 
break;
case 31: debugPrint(')');return 5; 
break;
case 32: debugPrint('{');return '{'; 
break;
case 33: debugPrint('}');return '}'; 
break;
case 34: debugPrint('[');return 56; 
break;
case 35: debugPrint(']');return 57; 
break;
case 36: debugPrint(',');return 12; 
break;
case 37: debugPrint('.');return 64; 
break;
case 38: debugPrint(':');return 29; 
break;
case 39: debugPrint(';');return ';'; 
break;
case 40: debugPrint(yy_.yytext);return 35; 
break;
case 41: debugPrint(yy_.yytext);return 36; 
break;
case 42: debugPrint(yy_.yytext);return 37; 
break;
case 43: debugPrint(yy_.yytext);return 'println'; 
break;
case 44: debugPrint(yy_.yytext);return 'print'; 
break;
case 45: debugPrint(yy_.yytext);return 38; 
break;
case 46: debugPrint(yy_.yytext);return 'tnull'; 
break;
case 47: debugPrint(yy_.yytext);return 67; 
break;
case 48: debugPrint(yy_.yytext);return 66; 
break;
case 49: debugPrint(yy_.yytext);return 63; 
break;
case 50: debugPrint(yy_.yytext);return 'tchar'; 
break;
case 51: debugPrint(yy_.yytext);return 70; 
break;
case 52: debugPrint(yy_.yytext);return 'tvoid'; 
break;
case 53: debugPrint(yy_.yytext);return 'retorno'; 
break;
case 54: debugPrint(yy_.yytext);return 11; 
break;
case 55: debugPrint(yy_.yytext);return 13; 
break;
case 56: debugPrint(yy_.yytext);return 14; 
break;
case 57: debugPrint(yy_.yytext);return 15; 
break;
case 58: debugPrint(yy_.yytext);return 16; 
break;
case 59: debugPrint(yy_.yytext);return 75; 
break;
case 60: debugPrint(yy_.yytext);return 74; 
break;
case 61: debugPrint(yy_.yytext);return 73; 
break;
case 62: debugPrint(yy_.yytext);return 72; 
break;
case 63: debugPrint(yy_.yytext);return 71; 
break;
case 64: debugPrint(yy_.yytext);return 'ToString'; 
break;
case 65: debugPrint(yy_.yytext);return 68; 
break;
case 66: debugPrint(yy_.yytext);return 69; 
break;
case 67: debugPrint(yy_.yytext);return 65; 
break;
case 68: debugPrint(yy_.yytext);return 'Rswitch'; 
break;
case 69: debugPrint(yy_.yytext);return 'Rcase'; 
break;
case 70: debugPrint(yy_.yytext);return 'Rbreak'; 
break;
case 71: debugPrint(yy_.yytext);return 'Rdefault'; 
break;
case 72: debugPrint(yy_.yytext);return 'Rwhile'; 
break;
case 73: debugPrint(yy_.yytext);return 'Rdo'; 
break;
case 74: debugPrint(yy_.yytext);return 'Rif'; 
break;
case 75: debugPrint(yy_.yytext);return 'Relse'; 
break;
case 76: debugPrint(yy_.yytext);return 'Rfor'; 
break;
case 77: debugPrint(yy_.yytext);return 'Rin'; 
break;
case 78: debugPrint(yy_.yytext);return 60; 
break;
case 79: debugPrint(yy_.yytext);return 61; 
break;
case 80: debugPrint(yy_.yytext); return 32; 
break;
case 81:return 'EOF'
break;
case 82:  Utils.registrarErrorLexico(yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext, 'Caracter no válido.'); return 'INVALIDO' 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\n+)/,/^(?:\t+)/,/^(?:\/\*[^'*']*\*\/)/,/^(?:\/\/[^\r\n]*[^\r\n])/,/^(?:\/\*[^"*"]\*\/)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:"(\\.|[^"])*")/,/^(?:'(\\.|[^'])')/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:\?)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\^)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:typeof\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:toString\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:parse\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:([a-zA-Z]|_|\$)([a-zA-Z]|[0-9]|_|\$)*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = expresiones;
exports.Parser = expresiones.Parser;
exports.parse = function () { return expresiones.parse.apply(expresiones, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}